Specification "iff".



Theorem  canonical_form_bool : forall E, {typeOf E (bool )} -> {value E} -> E = (tt ) \/ E = (ff ).
intros Main Value. case Main.
 search. search.
 case Value.
 


Define progresses : term -> prop by
	 progresses E := {value E} ;
	 progresses E := exists E', {step E E'}.

Theorem progress_tt : forall  T, {typeOf ((tt )) T} -> progresses ((tt )).
 search.



Theorem progress_ff : forall  T, {typeOf ((ff )) T} -> progresses ((ff )).
 search.



Theorem progress_if : forall E1 E2 E3 T, {typeOf ((if E1 E2 E3)) T} -> progresses E1 -> progresses ((if E1 E2 E3)).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert (E1 = (tt ) \/ E1 = (ff )). backchain canonical_form_bool. case Canonical. search. search. search.



Theorem progress : forall E T, {typeOf E T} -> progresses E. 
induction on 1. intros Main. E1 : case Main.
 backchain progress_tt.
  backchain progress_ff.

 apply IH to E1. backchain progress_if.

 
 
