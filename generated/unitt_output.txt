Welcome to Abella 2.0.3
Abella < Specification "unitt".
Reading specification "unitt"

Abella < Theorem canonical_form_unitType : 
forall E, {typeOf E unitType} -> {value E} -> E = unit.


============================
 forall E, {typeOf E unitType} -> {value E} -> E = unit

canonical_form_unitType < intros Main Value.

Variables: E
Main : {typeOf E unitType}
Value : {value E}
============================
 E = unit

canonical_form_unitType < case Main.

Value : {value unit}
============================
 unit = unit

canonical_form_unitType < case Value.

============================
 unit = unit

canonical_form_unitType < search.
Proof completed.
Abella < Define progresses : term -> prop by 
progresses E := {value E};
progresses E := exists E', {step E E'}.

Abella < Theorem progress_unit : 
forall T, {typeOf unit T} -> progresses unit.


============================
 forall T, {typeOf unit T} -> progresses unit

progress_unit < search.
Proof completed.
Abella < Theorem progress : 
forall E T, {typeOf E T} -> progresses E.


============================
 forall E T, {typeOf E T} -> progresses E

progress < induction on 1.

IH : forall E T, {typeOf E T}* -> progresses E
============================
 forall E T, {typeOf E T}@ -> progresses E

progress < intros Main.

Variables: E T
IH : forall E T, {typeOf E T}* -> progresses E
Main : {typeOf E T}@
============================
 progresses E

progress < TypeOfE1 : case Main.

IH : forall E T, {typeOf E T}* -> progresses E
============================
 progresses unit

progress < backchain progress_unit.
Proof completed.
Abella < Theorem preservation : 
forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'} -> {typeOf Exp' T}.


============================
 forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'} -> {typeOf Exp' T}

preservation < induction on 2.

IH : forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'}* -> {typeOf Exp' T}
============================
 forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'}@ -> {typeOf Exp' T}

preservation < intros TypeOf Main.

Variables: Exp Exp' T
IH : forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'}* -> {typeOf Exp' T}
TypeOf : {typeOf Exp T}
Main : {step Exp Exp'}@
============================
 {typeOf Exp' T}

preservation < Step : case Main.
Proof completed.
Abella < Theorem type_soundness : 
forall E E' T, {typeOf E T} -> {nstep E E'} -> progresses E'.


============================
 forall E E' T, {typeOf E T} -> {nstep E E'} -> progresses E'

type_soundness < induction on 2.

IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
============================
 forall E E' T, {typeOf E T} -> {nstep E E'}@ -> progresses E'

type_soundness < intros Main NStep.

Variables: E E' T
IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
Main : {typeOf E T}
NStep : {nstep E E'}@
============================
 progresses E'

type_soundness < Step1 : case NStep.
Subgoal 1:

Variables: E' T
IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
Main : {typeOf E' T}
============================
 progresses E'

Subgoal 2 is:
 progresses E'

type_soundness < backchain progress.
Subgoal 2:

Variables: E E' T E2
IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
Main : {typeOf E T}
Step1 : {step E E2}*
Step2 : {nstep E2 E'}*
============================
 progresses E'

type_soundness < TypeOfE2 : apply preservation to Main Step1.
Subgoal 2:

Variables: E E' T E2
IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
Main : {typeOf E T}
Step1 : {step E E2}*
Step2 : {nstep E2 E'}*
TypeOfE2 : {typeOf E2 T}
============================
 progresses E'

type_soundness < backchain IH with E = E2.
Proof completed.
Abella < 
</pre>
