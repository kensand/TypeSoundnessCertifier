Welcome to Abella 2.0.2
Abella < Specification "pairs_plain".
Reading specification "pairs_plain"

Abella < Theorem canonical_form_times : 
forall E T1 T2, {typeOf E (times T1 T2)} -> {value E} ->
  (exists Arg1 Arg2, E = pair Arg1 Arg2).

============================
 forall E T1 T2, {typeOf E (times T1 T2)} -> {value E} ->
   (exists Arg1 Arg2, E = pair Arg1 Arg2)

canonical_form_times < intros Main Value.

Variables: E T1 T2
Main : {typeOf E (times T1 T2)}
Value : {value E}
============================
 exists Arg1 Arg2, E = pair Arg1 Arg2

canonical_form_times < case Main.
Subgoal 1:

Variables: T1 T2 E2 E1
Value : {value (pair E1 E2)}
H1 : {typeOf E1 T1}
H2 : {typeOf E2 T2}
============================
 exists Arg1 Arg2, pair E1 E2 = pair Arg1 Arg2

Subgoal 2 is:
 exists Arg1 Arg2, fst E1 = pair Arg1 Arg2

Subgoal 3 is:
 exists Arg1 Arg2, snd E1 = pair Arg1 Arg2

canonical_form_times < search.
Subgoal 2:

Variables: T1 T2 T3 E1
Value : {value (fst E1)}
H1 : {typeOf E1 (times (times T1 T2) T3)}
============================
 exists Arg1 Arg2, fst E1 = pair Arg1 Arg2

Subgoal 3 is:
 exists Arg1 Arg2, snd E1 = pair Arg1 Arg2

canonical_form_times < case Value.
Subgoal 3:

Variables: T1 T2 T3 E1
Value : {value (snd E1)}
H1 : {typeOf E1 (times T3 (times T1 T2))}
============================
 exists Arg1 Arg2, snd E1 = pair Arg1 Arg2

canonical_form_times < case Value.
Proof completed.

Abella < Define progresses : term -> prop by 
progresses E := {value E};
progresses E := exists E', {step E E'}.

Abella < Theorem progress_pair : 
forall E1 E2 T, {typeOf (pair E1 E2) T} -> progresses E1 -> progresses E2 ->
  progresses (pair E1 E2).

============================
 forall E1 E2 T, {typeOf (pair E1 E2) T} -> progresses E1 -> progresses E2 ->
   progresses (pair E1 E2)

progress_pair < intros Main E1 E2.

Variables: E1 E2 T
Main : {typeOf (pair E1 E2) T}
E1 : progresses E1
E2 : progresses E2
============================
 progresses (pair E1 E2)

progress_pair < case Main.

Variables: E1 E2 T2 T1
E1 : progresses E1
E2 : progresses E2
H1 : {typeOf E1 T1}
H2 : {typeOf E2 T2}
============================
 progresses (pair E1 E2)

progress_pair < case ProgressClause : E1.
Subgoal 1:

Variables: E1 E2 T2 T1
E2 : progresses E2
H1 : {typeOf E1 T1}
H2 : {typeOf E2 T2}
ProgressClause : {value E1}
============================
 progresses (pair E1 E2)

Subgoal 2 is:
 progresses (pair E1 E2)

progress_pair < case E2.
Subgoal 1.1:

Variables: E1 E2 T2 T1
H1 : {typeOf E1 T1}
H2 : {typeOf E2 T2}
ProgressClause : {value E1}
H3 : {value E2}
============================
 progresses (pair E1 E2)

Subgoal 1.2 is:
 progresses (pair E1 E2)

Subgoal 2 is:
 progresses (pair E1 E2)

progress_pair < search.
Subgoal 1.2:

Variables: E1 E2 T2 T1 E'
H1 : {typeOf E1 T1}
H2 : {typeOf E2 T2}
ProgressClause : {value E1}
H3 : {step E2 E'}
============================
 progresses (pair E1 E2)

Subgoal 2 is:
 progresses (pair E1 E2)

progress_pair < search.
Subgoal 2:

Variables: E1 E2 T2 T1 E'
E2 : progresses E2
H1 : {typeOf E1 T1}
H2 : {typeOf E2 T2}
ProgressClause : {step E1 E'}
============================
 progresses (pair E1 E2)

progress_pair < search.
Proof completed.

Abella < Theorem progress_fst : 
forall E1 T, {typeOf (fst E1) T} -> progresses E1 -> progresses (fst E1).

============================
 forall E1 T, {typeOf (fst E1) T} -> progresses E1 -> progresses (fst E1)

progress_fst < intros Main E1.

Variables: E1 T
Main : {typeOf (fst E1) T}
E1 : progresses E1
============================
 progresses (fst E1)

progress_fst < case Main.

Variables: E1 T T2
E1 : progresses E1
H1 : {typeOf E1 (times T T2)}
============================
 progresses (fst E1)

progress_fst < case ProgressClause : E1.
Subgoal 1:

Variables: E1 T T2
H1 : {typeOf E1 (times T T2)}
ProgressClause : {value E1}
============================
 progresses (fst E1)

Subgoal 2 is:
 progresses (fst E1)

progress_fst < assert Canonical : exists Arg1 Arg2, E1 = pair Arg1 Arg2.
Subgoal 1.1:

Variables: E1 T T2
H1 : {typeOf E1 (times T T2)}
ProgressClause : {value E1}
============================
 exists Arg1 Arg2, E1 = pair Arg1 Arg2

Subgoal 1 is:
 progresses (fst E1)

Subgoal 2 is:
 progresses (fst E1)

progress_fst < backchain canonical_form_times.
Subgoal 1:

Variables: E1 T T2
H1 : {typeOf E1 (times T T2)}
ProgressClause : {value E1}
Canonical : exists Arg1 Arg2, E1 = pair Arg1 Arg2
============================
 progresses (fst E1)

Subgoal 2 is:
 progresses (fst E1)

progress_fst < case Canonical.
Subgoal 1:

Variables: T T2 Arg1 Arg2
H1 : {typeOf (pair Arg1 Arg2) (times T T2)}
ProgressClause : {value (pair Arg1 Arg2)}
============================
 progresses (fst (pair Arg1 Arg2))

Subgoal 2 is:
 progresses (fst E1)

progress_fst < search.
Subgoal 2:

Variables: E1 T T2 E'
H1 : {typeOf E1 (times T T2)}
ProgressClause : {step E1 E'}
============================
 progresses (fst E1)

progress_fst < search.
Proof completed.

Abella < Theorem progress_snd : 
forall E1 T, {typeOf (snd E1) T} -> progresses E1 -> progresses (snd E1).

============================
 forall E1 T, {typeOf (snd E1) T} -> progresses E1 -> progresses (snd E1)

progress_snd < intros Main E1.

Variables: E1 T
Main : {typeOf (snd E1) T}
E1 : progresses E1
============================
 progresses (snd E1)

progress_snd < case Main.

Variables: E1 T T1
E1 : progresses E1
H1 : {typeOf E1 (times T1 T)}
============================
 progresses (snd E1)

progress_snd < case ProgressClause : E1.
Subgoal 1:

Variables: E1 T T1
H1 : {typeOf E1 (times T1 T)}
ProgressClause : {value E1}
============================
 progresses (snd E1)

Subgoal 2 is:
 progresses (snd E1)

progress_snd < assert Canonical : exists Arg1 Arg2, E1 = pair Arg1 Arg2.
Subgoal 1.1:

Variables: E1 T T1
H1 : {typeOf E1 (times T1 T)}
ProgressClause : {value E1}
============================
 exists Arg1 Arg2, E1 = pair Arg1 Arg2

Subgoal 1 is:
 progresses (snd E1)

Subgoal 2 is:
 progresses (snd E1)

progress_snd < backchain canonical_form_times.
Subgoal 1:

Variables: E1 T T1
H1 : {typeOf E1 (times T1 T)}
ProgressClause : {value E1}
Canonical : exists Arg1 Arg2, E1 = pair Arg1 Arg2
============================
 progresses (snd E1)

Subgoal 2 is:
 progresses (snd E1)

progress_snd < case Canonical.
Subgoal 1:

Variables: T T1 Arg1 Arg2
H1 : {typeOf (pair Arg1 Arg2) (times T1 T)}
ProgressClause : {value (pair Arg1 Arg2)}
============================
 progresses (snd (pair Arg1 Arg2))

Subgoal 2 is:
 progresses (snd E1)

progress_snd < search.
Subgoal 2:

Variables: E1 T T1 E'
H1 : {typeOf E1 (times T1 T)}
ProgressClause : {step E1 E'}
============================
 progresses (snd E1)

progress_snd < search.
Proof completed.

Abella < Theorem progress : 
forall E T, {typeOf E T} -> progresses E.

============================
 forall E T, {typeOf E T} -> progresses E

progress < induction on 1.

IH : forall E T, {typeOf E T}* -> progresses E
============================
 forall E T, {typeOf E T}@ -> progresses E

progress < intros Main.

Variables: E T
IH : forall E T, {typeOf E T}* -> progresses E
Main : {typeOf E T}@
============================
 progresses E

progress < case E1 : Main.
Subgoal 1:

Variables: T2 E2 T1 E1
IH : forall E T, {typeOf E T}* -> progresses E
E1 : {typeOf E1 T1}*
E2 : {typeOf E2 T2}*
============================
 progresses (pair E1 E2)

Subgoal 2 is:
 progresses (fst E1)

Subgoal 3 is:
 progresses (snd E1)

progress < apply IH to E1.
Subgoal 1:

Variables: T2 E2 T1 E1
IH : forall E T, {typeOf E T}* -> progresses E
E1 : {typeOf E1 T1}*
E2 : {typeOf E2 T2}*
H1 : progresses E1
============================
 progresses (pair E1 E2)

Subgoal 2 is:
 progresses (fst E1)

Subgoal 3 is:
 progresses (snd E1)

progress < apply IH to E2.
Subgoal 1:

Variables: T2 E2 T1 E1
IH : forall E T, {typeOf E T}* -> progresses E
E1 : {typeOf E1 T1}*
E2 : {typeOf E2 T2}*
H1 : progresses E1
H2 : progresses E2
============================
 progresses (pair E1 E2)

Subgoal 2 is:
 progresses (fst E1)

Subgoal 3 is:
 progresses (snd E1)

progress < backchain progress_pair.
Subgoal 2:

Variables: T T2 E1
IH : forall E T, {typeOf E T}* -> progresses E
E1 : {typeOf E1 (times T T2)}*
============================
 progresses (fst E1)

Subgoal 3 is:
 progresses (snd E1)

progress < apply IH to E1.
Subgoal 2:

Variables: T T2 E1
IH : forall E T, {typeOf E T}* -> progresses E
E1 : {typeOf E1 (times T T2)}*
H1 : progresses E1
============================
 progresses (fst E1)

Subgoal 3 is:
 progresses (snd E1)

progress < backchain progress_fst.
Subgoal 3:

Variables: T T1 E1
IH : forall E T, {typeOf E T}* -> progresses E
E1 : {typeOf E1 (times T1 T)}*
============================
 progresses (snd E1)

progress < apply IH to E1.
Subgoal 3:

Variables: T T1 E1
IH : forall E T, {typeOf E T}* -> progresses E
E1 : {typeOf E1 (times T1 T)}*
H1 : progresses E1
============================
 progresses (snd E1)

progress < backchain progress_snd.
Proof completed.

Abella < Theorem preservation : 
forall E E' T, {step E E'} -> {typeOf E T} -> {typeOf E' T}.

============================
 forall E E' T, {step E E'} -> {typeOf E T} -> {typeOf E' T}

preservation < induction on 1.

IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
============================
 forall E E' T, {step E E'}@ -> {typeOf E T} -> {typeOf E' T}

preservation < intros Main TypeOf.

Variables: E E' T
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
Main : {step E E'}@
TypeOf : {typeOf E T}
============================
 {typeOf E' T}

preservation < case Step : Main.
Subgoal 1:

Variables: E' T E2
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
TypeOf : {typeOf (fst (pair E' E2)) T}
============================
 {typeOf E' T}

Subgoal 2 is:
 {typeOf E' T}

Subgoal 3 is:
 {typeOf (pair E1' E2) T}

Subgoal 4 is:
 {typeOf (pair E1 E2') T}

Subgoal 5 is:
 {typeOf (fst E1') T}

Subgoal 6 is:
 {typeOf (snd E1') T}

preservation < case Arg1_1 : TypeOf (keep).
Subgoal 1:

Variables: E' T E2 T2
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
TypeOf : {typeOf (fst (pair E' E2)) T}
Arg1_1 : {typeOf (pair E' E2) (times T T2)}
============================
 {typeOf E' T}

Subgoal 2 is:
 {typeOf E' T}

Subgoal 3 is:
 {typeOf (pair E1' E2) T}

Subgoal 4 is:
 {typeOf (pair E1 E2') T}

Subgoal 5 is:
 {typeOf (fst E1') T}

Subgoal 6 is:
 {typeOf (snd E1') T}

preservation < case Arg2_1 : Arg1_1 (keep).
Subgoal 1:

Variables: E' T E2 T2
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
TypeOf : {typeOf (fst (pair E' E2)) T}
Arg1_1 : {typeOf (pair E' E2) (times T T2)}
Arg2_1 : {typeOf E' T}
Arg2_2 : {typeOf E2 T2}
============================
 {typeOf E' T}

Subgoal 2 is:
 {typeOf E' T}

Subgoal 3 is:
 {typeOf (pair E1' E2) T}

Subgoal 4 is:
 {typeOf (pair E1 E2') T}

Subgoal 5 is:
 {typeOf (fst E1') T}

Subgoal 6 is:
 {typeOf (snd E1') T}

preservation < search.
Subgoal 2:

Variables: E' T E1
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
TypeOf : {typeOf (snd (pair E1 E')) T}
============================
 {typeOf E' T}

Subgoal 3 is:
 {typeOf (pair E1' E2) T}

Subgoal 4 is:
 {typeOf (pair E1 E2') T}

Subgoal 5 is:
 {typeOf (fst E1') T}

Subgoal 6 is:
 {typeOf (snd E1') T}

preservation < case Arg1_1 : TypeOf (keep).
Subgoal 2:

Variables: E' T E1 T1
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
TypeOf : {typeOf (snd (pair E1 E')) T}
Arg1_1 : {typeOf (pair E1 E') (times T1 T)}
============================
 {typeOf E' T}

Subgoal 3 is:
 {typeOf (pair E1' E2) T}

Subgoal 4 is:
 {typeOf (pair E1 E2') T}

Subgoal 5 is:
 {typeOf (fst E1') T}

Subgoal 6 is:
 {typeOf (snd E1') T}

preservation < case Arg2_1 : Arg1_1 (keep).
Subgoal 2:

Variables: E' T E1 T1
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
TypeOf : {typeOf (snd (pair E1 E')) T}
Arg1_1 : {typeOf (pair E1 E') (times T1 T)}
Arg2_1 : {typeOf E1 T1}
Arg2_2 : {typeOf E' T}
============================
 {typeOf E' T}

Subgoal 3 is:
 {typeOf (pair E1' E2) T}

Subgoal 4 is:
 {typeOf (pair E1 E2') T}

Subgoal 5 is:
 {typeOf (fst E1') T}

Subgoal 6 is:
 {typeOf (snd E1') T}

preservation < search.
Subgoal 3:

Variables: T E1' E1 E2
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
TypeOf : {typeOf (pair E1 E2) T}
Step : {step E1 E1'}*
============================
 {typeOf (pair E1' E2) T}

Subgoal 4 is:
 {typeOf (pair E1 E2') T}

Subgoal 5 is:
 {typeOf (fst E1') T}

Subgoal 6 is:
 {typeOf (snd E1') T}

preservation < case TypeOf1 : TypeOf.
Subgoal 3:

Variables: E1' E1 E2 T2 T1
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 T1}
TypeOf2 : {typeOf E2 T2}
============================
 {typeOf (pair E1' E2) (times T1 T2)}

Subgoal 4 is:
 {typeOf (pair E1 E2') T}

Subgoal 5 is:
 {typeOf (fst E1') T}

Subgoal 6 is:
 {typeOf (snd E1') T}

preservation < apply IH to Step TypeOf1.
Subgoal 3:

Variables: E1' E1 E2 T2 T1
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 T1}
TypeOf2 : {typeOf E2 T2}
H1 : {typeOf E1' T1}
============================
 {typeOf (pair E1' E2) (times T1 T2)}

Subgoal 4 is:
 {typeOf (pair E1 E2') T}

Subgoal 5 is:
 {typeOf (fst E1') T}

Subgoal 6 is:
 {typeOf (snd E1') T}

preservation < search.
Subgoal 4:

Variables: T E2' E2 E1
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
TypeOf : {typeOf (pair E1 E2) T}
Step : {step E2 E2'}*
============================
 {typeOf (pair E1 E2') T}

Subgoal 5 is:
 {typeOf (fst E1') T}

Subgoal 6 is:
 {typeOf (snd E1') T}

preservation < case TypeOf1 : TypeOf.
Subgoal 4:

Variables: E2' E2 E1 T2 T1
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
Step : {step E2 E2'}*
TypeOf1 : {typeOf E1 T1}
TypeOf2 : {typeOf E2 T2}
============================
 {typeOf (pair E1 E2') (times T1 T2)}

Subgoal 5 is:
 {typeOf (fst E1') T}

Subgoal 6 is:
 {typeOf (snd E1') T}

preservation < apply IH to Step TypeOf2.
Subgoal 4:

Variables: E2' E2 E1 T2 T1
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
Step : {step E2 E2'}*
TypeOf1 : {typeOf E1 T1}
TypeOf2 : {typeOf E2 T2}
H1 : {typeOf E2' T2}
============================
 {typeOf (pair E1 E2') (times T1 T2)}

Subgoal 5 is:
 {typeOf (fst E1') T}

Subgoal 6 is:
 {typeOf (snd E1') T}

preservation < search.
Subgoal 5:

Variables: T E1' E1
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
TypeOf : {typeOf (fst E1) T}
Step : {step E1 E1'}*
============================
 {typeOf (fst E1') T}

Subgoal 6 is:
 {typeOf (snd E1') T}

preservation < case TypeOf1 : TypeOf.
Subgoal 5:

Variables: T E1' E1 T2
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 (times T T2)}
============================
 {typeOf (fst E1') T}

Subgoal 6 is:
 {typeOf (snd E1') T}

preservation < apply IH to Step TypeOf1.
Subgoal 5:

Variables: T E1' E1 T2
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 (times T T2)}
H1 : {typeOf E1' (times T T2)}
============================
 {typeOf (fst E1') T}

Subgoal 6 is:
 {typeOf (snd E1') T}

preservation < search.
Subgoal 6:

Variables: T E1' E1
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
TypeOf : {typeOf (snd E1) T}
Step : {step E1 E1'}*
============================
 {typeOf (snd E1') T}

preservation < case TypeOf1 : TypeOf.
Subgoal 6:

Variables: T E1' E1 T1
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 (times T1 T)}
============================
 {typeOf (snd E1') T}

preservation < apply IH to Step TypeOf1.
Subgoal 6:

Variables: T E1' E1 T1
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 (times T1 T)}
H1 : {typeOf E1' (times T1 T)}
============================
 {typeOf (snd E1') T}

preservation < search.
Proof completed.

Abella < Goodbye.
