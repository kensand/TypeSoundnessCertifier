TODO: 
- generate termpred only for terms.
- generate nonvalue premises only for terms.. might be already done with the previous.
- eitherValue generate IH calls for arguments ONLY for terms. 

["typeOf (R APPLIED) T2 :- typeOf (abs R) (arrow T1 T2), typeOf APPLIED T1, typeOf (R APPLIED) T2.\n";


Query {typeOf (abs R) (arrow T1 T2)} -> {typeOf APPLIED T1} -> {typeOf (R APPLIED) T2} ->  {typeOf (R APPLIED) T2}.


Theorem blabla : forall R T1 T2 APPLIED, {typeOf (abs R) (arrow T1 T2)} -> {typeOf APPLIED T1} -> {typeOf (R APPLIED) T2} ->  {typeOf (R APPLIED) T2}.

Query {typeOf tt bool}.

Query (forall R T1 T2 APPLIED, {typeOf (abs R) (arrow T1 T2)} -> {typeOf APPLIED T1} -> {typeOf (R APPLIED) T2} ->  {typeOf (R APPLIED) T2}).


let read_process_lines command =
  let lines = ref [] in
  let in_channel = Unix.open_process_in command in
  begin
    try
      while true do
        lines := input_line in_channel :: !lines
      done;
    with End_of_file ->
    try
      while true do
        lines := input_line in_channel :: !lines
      done;
    with End_of_file ->
      ignore (Unix.close_process_in in_channel)
  end;
  List.rev !lines


(String.right (List.at output (i)) numCharsToKeep)
if (String.starts_with (List.at output (i)) query) then
 (if ( String.exists (List.at output (i)) "Query") then (List.at output (i)) else ok) 
