ocamlfind ocamlc -package batteries -linkpkg aux.ml typedLanguage.ml ldl.ml  proof.ml generateLambdaProlog.ml canonicalForms.ml progress.ml values.ml contextualRules.ml errorManagement.ml ldlToTypedLanguage.ml typeCheckerProgress.ml typeCheckerTypedLanguage.ml preservation.ml typeCheckerPreservation.ml parser.ml soundnessCertifier.ml -o soundy

#use "topfind";;
#require "batteries";;
open Batteries;;
#load "unix.cma";;

#load  "aux.cmo";;
#load  "typedLanguage.cmo" ;;
#load  "ldl.cmo" ;;
#load  "proof.cmo" ;;
#load  "generateLambdaProlog.cmo";;
#load  "canonicalForms.cmo";;
#load  "progress.cmo";;
#load  "values.cmo";;
#load  "contextualRules.cmo";;
#load  "errorManagement.cmo";;
#load  "ldlToTypedLanguage.cmo";;
#load  "typeCheckerProgress.cmo";;
#load  "typeCheckerTypedLanguage.cmo";;
#load  "preservation.cmo";;
#load  "typeCheckerPreservation.cmo";;
#load  "parser.cmo";;
#load  "soundnessCertifier.cmo";;

open Aux;;
open TypedLanguage;;
open Ldl;;
open Proof;;
open GenerateLambdaProlog;;
open CanonicalForms;;
open Progress;;
open Values;;
open ContextualRules;;
open ErrorManagement;;
open LdlToTypedLanguage;;
open TypeCheckerProgress;;
open TypeCheckerTypedLanguage;;
open Preservation;;
open TypeCheckerPreservation;;
open Parser;;
open SoundnessCertifier;;


let ts = generateNonValues (generateTermPred (generateValues systemF_CBV));;
let ts = addContextualRules ts;;
print_string (generateModule ts);;
print_string (generateSignature ts);;
print_string (generateTheorem (generateEitherLemma ts));;
print_string (generateTheoremS (generateCanonicalFormsLemma ts));;
print_string progressDefinition;;
print_string (generateTheoremS (generateProgressLemmas ts));;
print_string (generateTheorem (generateProgressTheorem ts));;
print_string (generateTheorem (generatePreservationTheorem ts));;
print_string (generateTestModule ts);;
print_string (runPreservationTests ts);;


