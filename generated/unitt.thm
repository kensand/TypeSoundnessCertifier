Specification "unitt".



Theorem  canonical_form_unitType : forall E, {typeOf E (unitType )} -> {value E} -> E = (unit ).
intros Main Value. case Main.
 case Value. search.

 
 




Define progresses : term -> prop by
	 progresses E := {value E} ;
	 progresses E := exists E', {step E E'}.

Theorem progress_unit : forall  T, {typeOf ((unit )) T} -> progresses ((unit )).
 search.





Theorem progress : forall E T, {typeOf E T} -> progresses E. 
induction on 1. intros Main. TypeOfE1 : case Main.
 backchain progress_unit.

 
 
 


Theorem preservation : forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'} -> {typeOf Exp' T}.
induction on 2. intros TypeOf Main. Step : case Main.



Theorem type_soundness : forall E E' T, {typeOf E T} -> {nstep E E'} -> progresses E'. 

induction on 2. intros Main NStep. Step1 : case NStep. 

backchain progress. 

TypeOfE2: apply preservation to Main Step1. backchain IH with E = E2.
