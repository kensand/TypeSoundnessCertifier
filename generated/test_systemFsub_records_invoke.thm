Specification "systemFsub_records_invoke".

Theorem test_r_projection_record : forall List T ListExp L' E', {typeOf (record ListExp) (recordT List)} -> {recordT_member List L' T} -> {typeOf E' T} -> {record_member ListExp L' E'} -> {typeOf E' T} /\ {typeOf (record ListExp) (recordT List)} /\ {recordT_member List L' T} /\ {record_member ListExp L' E'}.
intros. search.
Theorem test_r_invoke_record : forall List E2 T1 T2 ListExp L' E1, {typeOf (record ListExp) (recordT List)} -> {recordT_member List L' (arrow T1 T2)} -> {typeOf E2 T1} -> {typeOf E1 (arrow T1 T2)} -> {record_member ListExp L' E1} -> {typeOf (app E1 E2) T2} /\ {typeOf (record ListExp) (recordT List)} /\ {recordT_member List L' (arrow T1 T2)} /\ {record_member ListExp L' E1}.
intros. search.
Theorem test_r_app_abs : forall R E2 T1' T1 T2 T2', {typeOf (abs T1 R) (arrow T1' T2')} -> {typeOf E2 T1'} -> {typeOf (R E2) T2} -> {subtype T1' T1} -> {subtype T2 T2'} -> {typeOf (R E2) T2'} /\ {typeOf E2 T1}.
intros. search.
Theorem test_r_appT_absT : forall R2 X T1 T2 R R', {typeOf (absT T1 R2) (all T2 R')} -> {subtype X T2} -> {typeOf (R2 X) (R X)} -> {subtype (R X) (R' X)} -> {subtype T2 T1} -> {(pi x\ subtype x T2 => subtype (R x) (R' x))} -> {typeOf (R2 X) (R' X)} /\ {subtype X T1} /\ {subtype X T2}.
intros. search.
