Specification "stlc_tuples".



Theorem  canonical_form_arrow : forall E T1 T2, {typeOf E (arrow T1 T2)} -> {value E} -> (exists Arg1 Arg2, E = (abs Arg1 Arg2)).
intros Main Value. case Main.
 search.
 case Value. case Value. case Value. case Value. case Value. case Value.
 



Theorem  canonical_form_times5 : forall E T1 T2 T3 T4 T5, {typeOf E (times5 T1 T2 T3 T4 T5)} -> {value E} -> (exists Arg1 Arg2 Arg3 Arg4 Arg5, E = (tuple5 Arg1 Arg2 Arg3 Arg4 Arg5)).
intros Main Value. case Main.
 search.
 case Value. case Value. case Value. case Value. case Value. case Value.
 



Define progresses : term -> prop by
	 progresses E := {value E} ;
	 progresses E := exists E', {step E E'}.

Theorem progress_app : forall E1 E2 T, {typeOf (app E1 E2) T} -> progresses E1 -> progresses (app E1 E2).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert ((exists Arg1 Arg2, E1 = (abs Arg1 Arg2))). backchain canonical_form_arrow. case Canonical. search. search.



Theorem progress_select1 : forall E1 T, {typeOf (select1 E1) T} -> progresses E1 -> progresses (select1 E1).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert ((exists Arg1 Arg2 Arg3 Arg4 Arg5, E1 = (tuple5 Arg1 Arg2 Arg3 Arg4 Arg5))). backchain canonical_form_times5. case Canonical. search. search.



Theorem progress_select2 : forall E1 T, {typeOf (select2 E1) T} -> progresses E1 -> progresses (select2 E1).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert ((exists Arg1 Arg2 Arg3 Arg4 Arg5, E1 = (tuple5 Arg1 Arg2 Arg3 Arg4 Arg5))). backchain canonical_form_times5. case Canonical. search. search.



Theorem progress_select3 : forall E1 T, {typeOf (select3 E1) T} -> progresses E1 -> progresses (select3 E1).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert ((exists Arg1 Arg2 Arg3 Arg4 Arg5, E1 = (tuple5 Arg1 Arg2 Arg3 Arg4 Arg5))). backchain canonical_form_times5. case Canonical. search. search.



Theorem progress_select4 : forall E1 T, {typeOf (select4 E1) T} -> progresses E1 -> progresses (select4 E1).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert ((exists Arg1 Arg2 Arg3 Arg4 Arg5, E1 = (tuple5 Arg1 Arg2 Arg3 Arg4 Arg5))). backchain canonical_form_times5. case Canonical. search. search.



Theorem progress_select5 : forall E1 T, {typeOf (select5 E1) T} -> progresses E1 -> progresses (select5 E1).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert ((exists Arg1 Arg2 Arg3 Arg4 Arg5, E1 = (tuple5 Arg1 Arg2 Arg3 Arg4 Arg5))). backchain canonical_form_times5. case Canonical. search. search.



Theorem progress : forall E T, {typeOf E T} -> progresses E. 
induction on 1. intros Main. E1 : case Main.
search. search.
 apply IH to E1. backchain progress_app.
 apply IH to E1. backchain progress_select1.
 apply IH to E1. backchain progress_select2.
 apply IH to E1. backchain progress_select3.
 apply IH to E1. backchain progress_select4.
 apply IH to E1. backchain progress_select5.

 



Theorem preservation : forall E E' T, {step E E'} -> {typeOf E T} -> {typeOf E' T}.
induction on 1. intros Main TypeOf. Step : case Main.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep).
  
 ToCut : inst Arg2_1 with n1 = EE. cut ToCut with Arg1_2. 
 search.

 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep).
 
     
 search.

 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep).
 
     
 search.

 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep).
 
     
 search.

 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep).
 
     
 search.

 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep).
 
     
 search.

 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.

