Specification "fpl_cbv_sub".

Theorem test_r_app_abs : forall R E2 T1' T1 T2 T2', {typeOf (abs T1 R) (arrow T1' T2')} -> {typeOf E2 T1'} -> {typeOf (R E2) T2} -> {subtype T1' T1} -> {subtype T2 T2'} -> {typeOf (R E2) T2'} /\ {typeOf E2 T1}.
intros. search.
Theorem test_r_pred_zero : {typeOf (zero ) (int )} -> {typeOf (raise (zero )) (int )}.
intros. search.
Theorem test_r_pred_succ : forall E, {typeOf (succ E) (int )} -> {typeOf E (int )} -> {typeOf E (int )}.
intros. search.
Theorem test_r_if_tt : forall E2 E3 T, {typeOf (tt ) (bool )} -> {typeOf E2 T} -> {typeOf E3 T} -> {typeOf E2 T}.
intros. search.
Theorem test_r_if_ff : forall E2 E3 T, {typeOf (ff ) (bool )} -> {typeOf E2 T} -> {typeOf E3 T} -> {typeOf E3 T}.
intros. search.
Theorem test_r_fst_pair : forall E1 E2 T1 T1' T2 T2', {typeOf (pair E1 E2) (times T1' T2')} -> {typeOf E1 T1} -> {typeOf E2 T2} -> {subtype T1 T1'} -> {subtype T2 T2'} -> {typeOf E1 T1'}.
intros. search.
Theorem test_r_snd_pair : forall E1 E2 T1 T1' T2 T2', {typeOf (pair E1 E2) (times T1' T2')} -> {typeOf E1 T1} -> {typeOf E2 T2} -> {subtype T1 T1'} -> {subtype T2 T2'} -> {typeOf E2 T2'}.
intros. search.
Theorem test_r_case_inl : forall R1 R2 T E T1 T1' T2 T2', {typeOf (inl E) (sum T1' T2')} -> {typeOf (R1 E) T} -> {(pi x\ typeOf x T2' => typeOf (R2 x) T)} -> {typeOf E T1} -> {subtype T1 T1'} -> {subtype T2 T2'} -> {typeOf (R1 E) T}.
intros. search.
Theorem test_r_case_inr : forall R1 R2 T E T1 T1' T2 T2', {typeOf (inr E) (sum T1' T2')} -> {(pi x\ typeOf x T1' => typeOf (R1 x) T)} -> {typeOf (R2 E) T} -> {typeOf E T2} -> {subtype T1 T1'} -> {subtype T2 T2'} -> {typeOf (R2 E) T}.
intros. search.
Theorem test_r_head_emptyList : forall T T', {typeOf (emptyList ) (list T')} -> {subtype T T'} -> {typeOf (raise (zero )) T'}.
intros. search.
Theorem test_r_head_cons : forall E1 E2 T T', {typeOf (cons E1 E2) (list T')} -> {typeOf E1 T} -> {typeOf E2 (list T)} -> {subtype T T'} -> {typeOf E1 T'}.
intros. search.
Theorem test_r_tail_emptyList : forall T T', {typeOf (emptyList ) (list T')} -> {subtype T T'} -> {typeOf (raise (succ (zero ))) (list T')}.
intros. search.
Theorem test_r_tail_cons : forall E1 E2 T T', {typeOf (cons E1 E2) (list T')} -> {typeOf E1 T} -> {typeOf E2 (list T)} -> {subtype T T'} -> {typeOf E2 (list T')}.
intros. search.
Theorem test_r_appT_absT : forall R2 X R R', {typeOf (absT R2) (all R')} -> {typeOf (R2 X) (R X)} -> {subtype (R X) (R' X)} -> {(pi x\ subtype (R x) (R' x))} -> {typeOf (R2 X) (R' X)}.
intros. search.
Theorem test_r_letrec : forall R2 T1 R1 T2, {(pi x\ typeOf x T1 => typeOf (R1 x) T1)} -> {typeOf (R2 (fix (abs T1 R1))) T2} -> {typeOf (R2 (fix (abs T1 R1))) T2} /\ {typeOf (fix (abs T1 R1)) T1}.
intros. search.
Theorem test_r_fix : forall E T, {typeOf E (arrow T T)} -> {typeOf (app E (fix E)) T}.
intros. search.
Theorem test_r_try : forall E1 E2 T, {typeOf E1 T} -> {typeOf E2 (arrow (int ) T)} -> {typeOf E1 T}.
intros. search.
Theorem test_r_try_raise : forall E2 T E, {typeOf (raise E) T} -> {typeOf E2 (arrow (int ) T)} -> {typeOf E (int )} -> {typeOf (app E2 E) T}.
intros. search.
