Specification "fullFledged_par".



Theorem  canonical_form_arrow : forall E T1 T2, {typeOf E (arrow T1 T2)} -> {value E} -> (exists Arg1, E = (abs Arg1)).
intros Main Value. case Main.
 search.
 case Value. case Value. case Value. case Value. case Value.
 case Value.



Theorem  canonical_form_bool : forall E, {typeOf E (bool )} -> {value E} -> E = (tt ) \/ E = (ff ).
intros Main Value. case Main.
 search. search.
 case Value. case Value. case Value. case Value. case Value.
 case Value.



Theorem  canonical_form_list : forall E T1, {typeOf E (list T1)} -> {value E} -> E = (emptyList ) \/ (exists Arg1 Arg2, E = (cons Arg1 Arg2)).
intros Main Value. case Main.
 search. search.
 case Value. case Value. case Value. case Value. case Value.
 case Value.



Theorem  canonical_form_all : forall E U1, {typeOf E (all U1)} -> {value E} -> (exists Arg1, E = (absT Arg1)).
intros Main Value. case Main.
 search.
 case Value. case Value. case Value. case Value. case Value.
 case Value.



Define progresses : term -> prop by
	 progresses E := {value E} ;
	 progresses E := {error E} ;
	 progresses E := exists E', {step E E'}.

Theorem progress_app : forall E1 E2 T, {typeOf (app E1 E2) T} -> progresses E1 -> progresses (app E1 E2).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert ((exists Arg1, E1 = (abs Arg1))). backchain canonical_form_arrow. case Canonical. search. search. search.



Theorem progress_if : forall E1 E2 E3 T, {typeOf (if E1 E2 E3) T} -> progresses E1 -> progresses (if E1 E2 E3).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert (E1 = (tt ) \/ E1 = (ff )). backchain canonical_form_bool. case Canonical. search. search. search. search.



Theorem progress_head : forall E1 T, {typeOf (head E1) T} -> progresses E1 -> progresses (head E1).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert (E1 = (emptyList ) \/ (exists Arg1 Arg2, E1 = (cons Arg1 Arg2))). backchain canonical_form_list. case Canonical. search. search. search. search.



Theorem progress_appT : forall E1 T2 T, {typeOf (appT E1 T2) T} -> progresses E1 -> progresses (appT E1 T2).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert ((exists Arg1, E1 = (absT Arg1))). backchain canonical_form_all. case Canonical. search. search. search.



Theorem progress_let : forall E1 R2 T, {typeOf (let E1 R2) T} -> progresses E1 -> progresses (let E1 R2).
intros Main E1. case Main. ProgressClause : case E1.
 search. search. search.



Theorem progress : forall E T, {typeOf E T} -> progresses E. 
induction on 1. intros Main. E1 : case Main.
search. search. search. search. search. search.
 apply IH to E1. backchain progress_app.
 apply IH to E1. backchain progress_if.
 apply IH to E1. backchain progress_head.
 apply IH to E1. backchain progress_appT.
 apply IH to E1. backchain progress_let.

 search.



Theorem preservation : forall E E' T, {step E E'} -> {typeOf E T} -> {typeOf E' T}.
induction on 1. intros Main TypeOf. Step : case Main.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep).
  
 ToCut : inst Arg2_1 with n1 = EE. cut ToCut with Arg1_2.
 search.

 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep).
   
 
 search.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep).
   
 
 search.

 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep).
 
 
 search.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep).
 
  
 search.

 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep).
  
 inst Arg2_1 with n1 = X.
 search.

 Arg1_1 : case TypeOf(keep).  ToCut : inst Arg1_2 with n1 = V. cut ToCut with Arg1_1.
 search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf2. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf2. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf3. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 case Step. TypeOf1 : case TypeOf. case TypeOf1. search.
 case Step. TypeOf1 : case TypeOf. case TypeOf2. search.
 case Step. TypeOf1 : case TypeOf. case TypeOf1. search.
 case Step. TypeOf1 : case TypeOf. case TypeOf2. search.
 case Step. TypeOf1 : case TypeOf. case TypeOf3. search.
 case Step. TypeOf1 : case TypeOf. case TypeOf1. search.
 case Step. TypeOf1 : case TypeOf. case TypeOf1. search.
 case Step. TypeOf1 : case TypeOf. case TypeOf1. search.

