Welcome to Abella 2.0.2
Abella < Specification "iff".
Reading specification "iff"

Abella < Theorem canonical_form_bool : 
forall E, {typeOf E bool} -> {value E} -> E = tt \/ E = ff.

============================
 forall E, {typeOf E bool} -> {value E} -> E = tt \/ E = ff

canonical_form_bool < intros Main Value.

Variables: E
Main : {typeOf E bool}
Value : {value E}
============================
 E = tt \/ E = ff

canonical_form_bool < case Main.
Subgoal 1:

Value : {value tt}
============================
 tt = tt \/ tt = ff

Subgoal 2 is:
 ff = tt \/ ff = ff

Subgoal 3 is:
 if E1 E2 E3 = tt \/ if E1 E2 E3 = ff

canonical_form_bool < search.
Subgoal 2:

Value : {value ff}
============================
 ff = tt \/ ff = ff

Subgoal 3 is:
 if E1 E2 E3 = tt \/ if E1 E2 E3 = ff

canonical_form_bool < search.
Subgoal 3:

Variables: E3 E2 E1
Value : {value (if E1 E2 E3)}
H1 : {typeOf E1 bool}
H2 : {typeOf E2 bool}
H3 : {typeOf E3 bool}
============================
 if E1 E2 E3 = tt \/ if E1 E2 E3 = ff

canonical_form_bool < case Value.
Proof completed.

Abella < Define progresses : term -> prop by 
progresses E := {value E};
progresses E := exists E', {step E E'}.

Abella < Theorem progress_tt : 
forall T, {typeOf tt T} -> progresses tt.

============================
 forall T, {typeOf tt T} -> progresses tt

progress_tt < search.
Proof completed.

Abella < Theorem progress_ff : 
forall T, {typeOf ff T} -> progresses ff.

============================
 forall T, {typeOf ff T} -> progresses ff

progress_ff < search.
Proof completed.

Abella < Theorem progress_if : 
forall E1 E2 E3 T, {typeOf (if E1 E2 E3) T} -> progresses E1 ->
  progresses (if E1 E2 E3).

============================
 forall E1 E2 E3 T, {typeOf (if E1 E2 E3) T} -> progresses E1 ->
   progresses (if E1 E2 E3)

progress_if < intros Main E1.

Variables: E1 E2 E3 T
Main : {typeOf (if E1 E2 E3) T}
E1 : progresses E1
============================
 progresses (if E1 E2 E3)

progress_if < case Main.

Variables: E1 E2 E3 T
E1 : progresses E1
H1 : {typeOf E1 bool}
H2 : {typeOf E2 T}
H3 : {typeOf E3 T}
============================
 progresses (if E1 E2 E3)

progress_if < case ProgressClause : E1.
Subgoal 1:

Variables: E1 E2 E3 T
H1 : {typeOf E1 bool}
H2 : {typeOf E2 T}
H3 : {typeOf E3 T}
ProgressClause : {value E1}
============================
 progresses (if E1 E2 E3)

Subgoal 2 is:
 progresses (if E1 E2 E3)

progress_if < assert Canonical : E1 = tt \/ E1 = ff.
Subgoal 1.1:

Variables: E1 E2 E3 T
H1 : {typeOf E1 bool}
H2 : {typeOf E2 T}
H3 : {typeOf E3 T}
ProgressClause : {value E1}
============================
 E1 = tt \/ E1 = ff

Subgoal 1 is:
 progresses (if E1 E2 E3)

Subgoal 2 is:
 progresses (if E1 E2 E3)

progress_if < backchain canonical_form_bool.
Subgoal 1:

Variables: E1 E2 E3 T
H1 : {typeOf E1 bool}
H2 : {typeOf E2 T}
H3 : {typeOf E3 T}
ProgressClause : {value E1}
Canonical : E1 = tt \/ E1 = ff
============================
 progresses (if E1 E2 E3)

Subgoal 2 is:
 progresses (if E1 E2 E3)

progress_if < case Canonical.
Subgoal 1.2:

Variables: E2 E3 T
H1 : {typeOf tt bool}
H2 : {typeOf E2 T}
H3 : {typeOf E3 T}
ProgressClause : {value tt}
============================
 progresses (if tt E2 E3)

Subgoal 1.3 is:
 progresses (if ff E2 E3)

Subgoal 2 is:
 progresses (if E1 E2 E3)

progress_if < search.
Subgoal 1.3:

Variables: E2 E3 T
H1 : {typeOf ff bool}
H2 : {typeOf E2 T}
H3 : {typeOf E3 T}
ProgressClause : {value ff}
============================
 progresses (if ff E2 E3)

Subgoal 2 is:
 progresses (if E1 E2 E3)

progress_if < search.
Subgoal 2:

Variables: E1 E2 E3 T E'
H1 : {typeOf E1 bool}
H2 : {typeOf E2 T}
H3 : {typeOf E3 T}
ProgressClause : {step E1 E'}
============================
 progresses (if E1 E2 E3)

progress_if < search.
Proof completed.

Abella < Theorem progress : 
forall E T, {typeOf E T} -> progresses E.

============================
 forall E T, {typeOf E T} -> progresses E

progress < induction on 1.

IH : forall E T, {typeOf E T}* -> progresses E
============================
 forall E T, {typeOf E T}@ -> progresses E

progress < intros Main.

Variables: E T
IH : forall E T, {typeOf E T}* -> progresses E
Main : {typeOf E T}@
============================
 progresses E

progress < case E1 : Main.
Subgoal 1:

IH : forall E T, {typeOf E T}* -> progresses E
============================
 progresses tt

Subgoal 2 is:
 progresses ff

Subgoal 3 is:
 progresses (if E1 E2 E3)

progress < backchain progress_tt.
Subgoal 2:

IH : forall E T, {typeOf E T}* -> progresses E
============================
 progresses ff

Subgoal 3 is:
 progresses (if E1 E2 E3)

progress < backchain progress_ff.
Subgoal 3:

Variables: T E3 E2 E1
IH : forall E T, {typeOf E T}* -> progresses E
E1 : {typeOf E1 bool}*
E2 : {typeOf E2 T}*
E3 : {typeOf E3 T}*
============================
 progresses (if E1 E2 E3)

progress < apply IH to E1.
Subgoal 3:

Variables: T E3 E2 E1
IH : forall E T, {typeOf E T}* -> progresses E
E1 : {typeOf E1 bool}*
E2 : {typeOf E2 T}*
E3 : {typeOf E3 T}*
H1 : progresses E1
============================
 progresses (if E1 E2 E3)

progress < backchain progress_if.
Proof completed.

Abella < Theorem preservation : 
forall E E' T, {step E E'} -> {typeOf E T} -> {typeOf E' T}.

============================
 forall E E' T, {step E E'} -> {typeOf E T} -> {typeOf E' T}

preservation < induction on 1.

IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
============================
 forall E E' T, {step E E'}@ -> {typeOf E T} -> {typeOf E' T}

preservation < intros Main TypeOf.

Variables: E E' T
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
Main : {step E E'}@
TypeOf : {typeOf E T}
============================
 {typeOf E' T}

preservation < case Step : Main.
Subgoal 1:

Variables: E' T E2
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
TypeOf : {typeOf (if tt E' E2) T}
============================
 {typeOf E' T}

Subgoal 2 is:
 {typeOf E' T}

Subgoal 3 is:
 {typeOf (if E1' E2 E3) T}

preservation < case Arg1_1 : TypeOf (keep).
Subgoal 1:

Variables: E' T E2
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
TypeOf : {typeOf (if tt E' E2) T}
Arg1_1 : {typeOf tt bool}
Arg1_2 : {typeOf E' T}
Arg1_3 : {typeOf E2 T}
============================
 {typeOf E' T}

Subgoal 2 is:
 {typeOf E' T}

Subgoal 3 is:
 {typeOf (if E1' E2 E3) T}

preservation < case Arg2_1 : Arg1_1 (keep).
Subgoal 1:

Variables: E' T E2
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
TypeOf : {typeOf (if tt E' E2) T}
Arg1_1 : {typeOf tt bool}
Arg1_2 : {typeOf E' T}
Arg1_3 : {typeOf E2 T}
============================
 {typeOf E' T}

Subgoal 2 is:
 {typeOf E' T}

Subgoal 3 is:
 {typeOf (if E1' E2 E3) T}

preservation < search.
Subgoal 2:

Variables: E' T E1
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
TypeOf : {typeOf (if ff E1 E') T}
============================
 {typeOf E' T}

Subgoal 3 is:
 {typeOf (if E1' E2 E3) T}

preservation < case Arg1_1 : TypeOf (keep).
Subgoal 2:

Variables: E' T E1
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
TypeOf : {typeOf (if ff E1 E') T}
Arg1_1 : {typeOf ff bool}
Arg1_2 : {typeOf E1 T}
Arg1_3 : {typeOf E' T}
============================
 {typeOf E' T}

Subgoal 3 is:
 {typeOf (if E1' E2 E3) T}

preservation < case Arg2_1 : Arg1_1 (keep).
Subgoal 2:

Variables: E' T E1
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
TypeOf : {typeOf (if ff E1 E') T}
Arg1_1 : {typeOf ff bool}
Arg1_2 : {typeOf E1 T}
Arg1_3 : {typeOf E' T}
============================
 {typeOf E' T}

Subgoal 3 is:
 {typeOf (if E1' E2 E3) T}

preservation < search.
Subgoal 3:

Variables: T E1' E1 E3 E2
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
TypeOf : {typeOf (if E1 E2 E3) T}
Step : {step E1 E1'}*
============================
 {typeOf (if E1' E2 E3) T}

preservation < case TypeOf1 : TypeOf.
Subgoal 3:

Variables: T E1' E1 E3 E2
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 bool}
TypeOf2 : {typeOf E2 T}
TypeOf3 : {typeOf E3 T}
============================
 {typeOf (if E1' E2 E3) T}

preservation < apply IH to Step TypeOf1.
Subgoal 3:

Variables: T E1' E1 E3 E2
IH : forall E E' T, {step E E'}* -> {typeOf E T} -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 bool}
TypeOf2 : {typeOf E2 T}
TypeOf3 : {typeOf E3 T}
H1 : {typeOf E1' bool}
============================
 {typeOf (if E1' E2 E3) T}

preservation < search.
Proof completed.

Abella < Goodbye.
