Specification "stlc_par_sums".



Theorem  canonical_form_sum : forall E T1 T2, {typeOf E (sum T1 T2)} -> {value E} -> (exists Arg1, E = (inr Arg1) /\ {value Arg1}) \/ (exists Arg1, E = (inl Arg1) /\ {value Arg1}).
intros Main Value. case Main.
 case Value. search.
 case Value. search.

 case Value. case Value.
 


Theorem  canonical_form_arrow : forall E T1 T2, {typeOf E (arrow T1 T2)} -> {value E} -> (exists Arg1 Arg2, E = (abs Arg1 Arg2)).
intros Main Value. case Main.
 case Value. search.

 case Value. case Value.
 




Define progresses : term -> prop by
	 progresses E := {value E} ;
	 progresses E := exists E', {step E E'}.

Theorem progress_inr : forall E1 T, {typeOf ((inr E1)) T} -> progresses E1 -> progresses ((inr E1)).
intros Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 search. search.



Theorem progress_inl : forall E1 T, {typeOf ((inl E1)) T} -> progresses E1 -> progresses ((inl E1)).
intros Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 search. search.



Theorem progress_case : forall E1 R2 R3 T, {typeOf ((case E1 R2 R3)) T} -> progresses E1 -> progresses ((case E1 R2 R3)).
intros Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_sum to TypeOfE1 ProgressClause. case Canonical. search. search. search.



Theorem progress_abs : forall T1 R2 T, {typeOf ((abs T1 R2)) T} -> progresses ((abs T1 R2)).
 search.



Theorem progress_app : forall E1 E2 T, {typeOf ((app E1 E2)) T} -> progresses E1 -> progresses E2 -> progresses ((app E1 E2)).
intros Main PrgsE1 PrgsE2. TypeOfE1 : case Main. ProgressClause : case PrgsE1. case PrgsE2.
 Canonical : apply canonical_form_arrow to TypeOfE1 ProgressClause.  search. search. search.





Theorem progress : forall E T, {typeOf E T} -> progresses E. 
induction on 1. intros Main. TypeOfE1 : case Main.
apply IH to TypeOfE1. backchain progress_inr.
 apply IH to TypeOfE1. backchain progress_inl.
  backchain progress_abs.

 apply IH to TypeOfE1. backchain progress_case.
 apply IH to TypeOfE1. apply IH to TypeOfE2. backchain progress_app.

 
 


Theorem preservation : forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'} -> {typeOf Exp' T}.
induction on 2. intros TypeOf Main. Step : case Main.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). ToCut : inst Arg1_2 with n1 = EE. cut ToCut with Arg2_1. search.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). ToCut : inst Arg1_3 with n1 = EE. cut ToCut with Arg2_1. search.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). ToCut : inst Arg2_1 with n1 = E. cut ToCut with Arg1_2. search.
 TypeOf1 : case TypeOf. apply IH to TypeOf1 Step. search.
 TypeOf1 : case TypeOf. apply IH to TypeOf1 Step. search.
 TypeOf1 : case TypeOf. apply IH to TypeOf1 Step. search.
 TypeOf1 : case TypeOf. apply IH to TypeOf1 Step. search.
 TypeOf1 : case TypeOf. apply IH to TypeOf2 Step. search.



Theorem type_soundness : forall E E' T, {typeOf E T} -> {nstep E E'} -> progresses E'. 

induction on 2. intros Main NStep. Step1 : case NStep. 

backchain progress. 

TypeOfE2: apply preservation to Main Step1. backchain IH with E = E2.
