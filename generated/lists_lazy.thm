Specification "lists_lazy".



Theorem  canonical_form_list : forall E T1, {typeOf E (list T1)} -> {value E} -> (exists Arg1 Arg2, E = (cons Arg1 Arg2)) \/ E = (emptyList ).
intros Main Value. case Main.
 case Value. search.
 case Value. search.

 case Value. case Value.
 case Value.





Define progresses : term -> prop by
	 progresses E := {value E} ;
	 progresses E := {error E} ;
	 progresses E := exists E', {step E E'}.

Theorem progress_cons : forall E1 E2 T, {typeOf ((cons E1 E2)) T} -> progresses ((cons E1 E2)).
 search.



Theorem progress_emptyList : forall  T, {typeOf ((emptyList )) T} -> progresses ((emptyList )).
 search.



Theorem progress_tail : forall E1 T, {typeOf ((tail E1)) T} -> progresses E1 -> progresses ((tail E1)).
intros Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_list to TypeOfE1 ProgressClause. case Canonical. search. search. search. search.



Theorem progress_head : forall E1 T, {typeOf ((head E1)) T} -> progresses E1 -> progresses ((head E1)).
intros Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_list to TypeOfE1 ProgressClause. case Canonical. search. search. search. search.



Theorem progress_myError : forall  T, {typeOf ((myError )) T} -> progresses ((myError )).
 search.





Theorem progress : forall E T, {typeOf E T} -> progresses E. 
induction on 1. intros Main. TypeOfE1 : case Main.
 backchain progress_cons.
  backchain progress_emptyList.

 apply IH to TypeOfE1. backchain progress_tail.
 apply IH to TypeOfE1. backchain progress_head.

 
  backchain progress_myError.




Theorem preservation : forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'} -> {typeOf Exp' T}.
induction on 2. intros TypeOf Main. Step : case Main.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). search.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). search.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). search.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). search.
 TypeOf1 : case TypeOf. apply IH to TypeOf1 Step. search.
 TypeOf1 : case TypeOf. apply IH to TypeOf1 Step. search.
 case Step. TypeOf1 : case TypeOf. case TypeOf1. search.
 case Step. TypeOf1 : case TypeOf. case TypeOf1. search.



Theorem type_soundness : forall E E' T, {typeOf E T} -> {nstep E E'} -> progresses E'. 

induction on 2. intros Main NStep. Step1 : case NStep. 

backchain progress. 

TypeOfE2: apply preservation to Main Step1. backchain IH with E = E2.
