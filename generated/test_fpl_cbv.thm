Specification "fpl_cbv".

Theorem test_r_unfold_fold : forall V R, {typeOf (fold V R) (mu R)} -> {typeOf V (R (mu R))} -> {typeOf V (R (mu R))}.
intros. search.
Theorem test_r_appT_absT : forall R2 R X, {typeOf (absT R2) (all R)} -> {typeOf (R2 X) (R X)} -> {typeOf (R2 X) (R X)}.
intros. search.
Theorem test_r_tail_emptyList : forall T, {typeOf (emptyList ) (list T)} -> {typeOf (raise (succ (zero ))) (list T)}.
intros. search.
Theorem test_r_tail_cons : forall E1 E2 T, {typeOf (cons E1 E2) (list T)} -> {typeOf E1 T} -> {typeOf E2 (list T)} -> {typeOf E2 (list T)}.
intros. search.
Theorem test_r_head_emptyList : forall T, {typeOf (emptyList ) (list T)} -> {typeOf (raise (zero )) T}.
intros. search.
Theorem test_r_head_cons : forall E1 E2 T, {typeOf (cons E1 E2) (list T)} -> {typeOf E1 T} -> {typeOf E2 (list T)} -> {typeOf E1 T}.
intros. search.
Theorem test_r_case_inl : forall R1 T2 R2 T EE T1, {typeOf (inl EE) (sum T1 T2)} -> {typeOf (R1 EE) T} -> {(pi x\ typeOf x T2 => typeOf (R2 x) T)} -> {typeOf EE T1} -> {typeOf (R1 EE) T} /\ {typeOf EE T1}.
intros. search.
Theorem test_r_case_inr : forall T1 R1 R2 T EE T2, {typeOf (inr EE) (sum T1 T2)} -> {(pi x\ typeOf x T1 => typeOf (R1 x) T)} -> {typeOf (R2 EE) T} -> {typeOf EE T2} -> {typeOf (R2 EE) T} /\ {typeOf EE T2}.
intros. search.
Theorem test_r_snd_pair : forall E1 T1 E2 T2, {typeOf (pair E1 E2) (times T1 T2)} -> {typeOf E1 T1} -> {typeOf E2 T2} -> {typeOf E2 T2}.
intros. search.
Theorem test_r_fst_pair : forall E1 T1 E2 T2, {typeOf (pair E1 E2) (times T1 T2)} -> {typeOf E1 T1} -> {typeOf E2 T2} -> {typeOf E1 T1}.
intros. search.
Theorem test_r_if_tt : forall E1 E2 T, {typeOf (tt ) (bool )} -> {typeOf E1 T} -> {typeOf E2 T} -> {typeOf E1 T}.
intros. search.
Theorem test_r_if_ff : forall E1 E2 T, {typeOf (ff ) (bool )} -> {typeOf E1 T} -> {typeOf E2 T} -> {typeOf E2 T}.
intros. search.
Theorem test_r_pred_zero : {typeOf (zero ) (int )} -> {typeOf (raise (zero )) (int )}.
intros. search.
Theorem test_r_pred_succ : forall E, {typeOf (succ E) (int )} -> {typeOf E (int )} -> {typeOf E (int )}.
intros. search.
Theorem test_r_app_abs : forall T T1 R V T2, {typeOf (abs T R) (arrow T1 T2)} -> {typeOf V T1} -> {typeOf (R V) T2} -> {typeOf (R V) T2} /\ {typeOf V T1}.
intros. search.
Theorem test_r_letrec : forall R2 T1 R1 T2, {(pi x\ typeOf x T1 => typeOf (R1 x) T1)} -> {typeOf (R2 (fix (abs T1 R1))) T2} -> {typeOf (R2 (fix (abs T1 R1))) T2} /\ {typeOf (fix (abs T1 R1)) T1}.
intros. search.
Theorem test_r_fix : forall V T, {typeOf V (arrow T T)} -> {typeOf (app V (fix V)) T}.
intros. search.
Theorem test_r_try : forall E1 E2 T, {typeOf E1 T} -> {typeOf E2 (arrow (int ) T)} -> {typeOf E1 T}.
intros. search.
Theorem test_r_try_raise : forall E2 T E1, {typeOf (raise E1) T} -> {typeOf E2 (arrow (int ) T)} -> {typeOf E1 (int )} -> {typeOf (app E2 E1) T}.
intros. search.
