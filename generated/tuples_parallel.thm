Specification "tuples_parallel".



Theorem  canonical_form_times5 : forall E T1 T2 T3 T4 T5, {typeOf E (times5 T1 T2 T3 T4 T5)} -> {value E} -> (exists Arg1 Arg2 Arg3 Arg4 Arg5, E = (tuple5 Arg1 Arg2 Arg3 Arg4 Arg5)).
intros Main Value. case Main.
 search.
 case Value. case Value. case Value. case Value. case Value.
 


Define progresses : term -> prop by
	 progresses E := {value E} ;
	 progresses E := exists E', {step E E'}.

Theorem progress_tuple5 : forall E1 E2 E3 E4 E5 T, {typeOf ((tuple5 E1 E2 E3 E4 E5)) T} -> progresses E1 -> progresses E2 -> progresses E3 -> progresses E4 -> progresses E5 -> progresses ((tuple5 E1 E2 E3 E4 E5)).
intros Main E1 E2 E3 E4 E5. case Main. ProgressClause : case E1. case E2. case E3. case E4. case E5.
 search. search. search. search. search. search.



Theorem progress_select1 : forall E1 T, {typeOf ((select1 E1)) T} -> progresses E1 -> progresses ((select1 E1)).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert ((exists Arg1 Arg2 Arg3 Arg4 Arg5, E1 = (tuple5 Arg1 Arg2 Arg3 Arg4 Arg5))). backchain canonical_form_times5. case Canonical.  search. search.



Theorem progress_select2 : forall E1 T, {typeOf ((select2 E1)) T} -> progresses E1 -> progresses ((select2 E1)).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert ((exists Arg1 Arg2 Arg3 Arg4 Arg5, E1 = (tuple5 Arg1 Arg2 Arg3 Arg4 Arg5))). backchain canonical_form_times5. case Canonical.  search. search.



Theorem progress_select3 : forall E1 T, {typeOf ((select3 E1)) T} -> progresses E1 -> progresses ((select3 E1)).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert ((exists Arg1 Arg2 Arg3 Arg4 Arg5, E1 = (tuple5 Arg1 Arg2 Arg3 Arg4 Arg5))). backchain canonical_form_times5. case Canonical.  search. search.



Theorem progress_select4 : forall E1 T, {typeOf ((select4 E1)) T} -> progresses E1 -> progresses ((select4 E1)).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert ((exists Arg1 Arg2 Arg3 Arg4 Arg5, E1 = (tuple5 Arg1 Arg2 Arg3 Arg4 Arg5))). backchain canonical_form_times5. case Canonical.  search. search.



Theorem progress_select5 : forall E1 T, {typeOf ((select5 E1)) T} -> progresses E1 -> progresses ((select5 E1)).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert ((exists Arg1 Arg2 Arg3 Arg4 Arg5, E1 = (tuple5 Arg1 Arg2 Arg3 Arg4 Arg5))). backchain canonical_form_times5. case Canonical.  search. search.



Theorem progress : forall E T, {typeOf E T} -> progresses E. 
induction on 1. intros Main. E1 : case Main.
apply IH to E1. apply IH to E2. apply IH to E3. apply IH to E4. apply IH to E5. backchain progress_tuple5.

 apply IH to E1. backchain progress_select1.
 apply IH to E1. backchain progress_select2.
 apply IH to E1. backchain progress_select3.
 apply IH to E1. backchain progress_select4.
 apply IH to E1. backchain progress_select5.

 
 


Theorem preservation : forall E E' T, {step E E'} -> {typeOf E T} -> {typeOf E' T}.
induction on 1. intros Main TypeOf. Step : case Main.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). search.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). search.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). search.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). search.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf2. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf3. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf4. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf5. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.

