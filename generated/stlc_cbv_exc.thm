Specification "stlc_cbv_exc".







Theorem  canonical_form_arrow : forall E T1 T2, {typeOf E (arrow T1 T2)} -> {value E} -> (exists Arg1 Arg2, E = (abs Arg1 Arg2)).

intros  Main Value. Subsumption : case Main.
 case Value. search.

 case Value.
 case Value. case Value.





Define progresses : term -> prop by
	 progresses E := {value E} ;
	 progresses E := {error E} ;
	 progresses E := exists E', {step E E'}.

Theorem progress_abs : forall T1 R2 T, {typeOf ((abs T1 R2)) T} -> progresses ((abs T1 R2)).

 search.



Theorem progress_app : forall E1 E2 T, {typeOf ((app E1 E2)) T} -> progresses E1 -> progresses E2 -> progresses ((app E1 E2)).

intros  Main PrgsE1 PrgsE2. TypeOfE1 : case Main. ProgressClause : case PrgsE1. case PrgsE2.
 Canonical : apply canonical_form_arrow to TypeOfE1 ProgressClause.   search. search. search. search. search.



Theorem progress_excValue : forall  T, {typeOf ((excValue )) T} -> progresses ((excValue )).

 search.



Theorem progress_try : forall E1 E2 T, {typeOf ((try E1 E2)) T} -> progresses E1 -> progresses ((try E1 E2)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 search. case ProgressClause. search. search.



Theorem progress_raise : forall E1 T, {typeOf ((raise E1)) T} -> progresses E1 -> progresses ((raise E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 search. search. search.





Theorem progress : forall E T, {typeOf E T} -> progresses E. 
induction on 1. intros Main. TypeOfE1 : case Main.
 backchain progress_abs.
  backchain progress_excValue.

 apply IH to TypeOfE1. apply IH to TypeOfE2. backchain progress_app.

 
 apply IH to TypeOfE1. backchain progress_try.
 apply IH to TypeOfE1. backchain progress_raise.




Theorem error_types_all: forall E T1 T2, {typeOf E T1} -> {error E} -> {typeOf E T2}. 

intros Hyp1 Error. case Error. case Hyp1. 

search.

Theorem preservation : forall Exp Exp' Typ, {typeOf Exp Typ} -> {step Exp Exp'} -> {typeOf Exp' Typ}.
induction on 1. intros  Main Step. Hyp1 : case Main.
 Step : case Step.
 Step : case Step.
 Step : case Step. Hyp1 : case Hyp1(keep). CutHyp : assert ({typeOf E2 T1}). ToCut : inst Hyp3 with n1 = E2. cut ToCut with CutHyp. clear CutHyp. clear ToCut. search.
 apply IH to Hyp1 Step. search.
 apply IH to Hyp2 Step. search.
 backchain error_types_all. backchain error_types_all.
 Step : case Step. search.
 Hyp1 : case Hyp1(keep). search.
 apply IH to Hyp1 Step. search.

 Step : case Step. apply IH to Hyp1 Step. search.
 backchain error_types_all.





Theorem type_soundness : forall E E' T, {typeOf E T} -> {nstep E E'} -> progresses E'. 

induction on 2. intros Main NStep. Step1 : case NStep. 

backchain progress. 

TypeOfE2: apply preservation to Main Step1. backchain IH with E = E2.
