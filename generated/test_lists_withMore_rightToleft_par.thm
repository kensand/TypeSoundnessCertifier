Specification "lists_withMore_rightToleft_par".

Theorem test_r_tail_emptyList : forall T, {typeOf (emptyList ) (list T)} -> {typeOf (myError ) (list T)}.
intros. search.
Theorem test_r_tail_cons : forall E1 E2 T, {typeOf (cons E1 E2) (list T)} -> {typeOf E1 T} -> {typeOf E2 (list T)} -> {typeOf E2 (list T)}.
intros. search.
Theorem test_r_head_emptyList : forall T, {typeOf (emptyList ) (list T)} -> {typeOf (myError ) T}.
intros. search.
Theorem test_r_head_cons : forall E1 E2 T, {typeOf (cons E1 E2) (list T)} -> {typeOf E1 T} -> {typeOf E2 (list T)} -> {typeOf E1 T}.
intros. search.
Theorem test_r_case_inl : forall R1 T2 R2 T EE T1, {typeOf (inl EE) (sum T1 T2)} -> {typeOf (R1 EE) T} -> {(pi x\ typeOf x T2 => typeOf (R2 x) T)} -> {typeOf EE T1} -> {typeOf (R1 EE) T} /\ {typeOf EE T1}.
intros. search.
Theorem test_r_case_inr : forall T1 R1 R2 T EE T2, {typeOf (inr EE) (sum T1 T2)} -> {(pi x\ typeOf x T1 => typeOf (R1 x) T)} -> {typeOf (R2 EE) T} -> {typeOf EE T2} -> {typeOf (R2 EE) T} /\ {typeOf EE T2}.
intros. search.
Theorem test_r_app_abs : forall T T1 R E T2, {typeOf (abs T R) (arrow T1 T2)} -> {typeOf E T1} -> {typeOf (R E) T2} -> {typeOf (R E) T2} /\ {typeOf E T1}.
intros. search.
