Specification "listsIsNil".



Theorem  canonical_form_list : forall E T1, {typeOf E (list T1)} -> {value E} -> E = (emptyList ) \/ (exists Arg1 Arg2, E = (cons Arg1 Arg2)).
intros Main Value. case Main.
 search. search.
 case Value. case Value. case Value.
 case Value.



Theorem  canonical_form_bool : forall E, {typeOf E (bool )} -> {value E} -> E = (tt ) \/ E = (ff ).
intros Main Value. case Main.
 search. search.
 case Value. case Value. case Value.
 case Value.



Define progresses : term -> prop by
	 progresses E := {value E} ;
	 progresses E := {error E} ;
	 progresses E := exists E', {step E E'}.

Theorem progress_emptyList : forall  T, {typeOf ((emptyList )) T} -> progresses ((emptyList )).
 search.



Theorem progress_cons : forall E1 E2 T, {typeOf ((cons E1 E2)) T} -> progresses E1 -> progresses E2 -> progresses ((cons E1 E2)).
intros Main E1 E2. case Main. ProgressClause : case E1. case E2.
 search. search. search. search. search.



Theorem progress_head : forall E1 T, {typeOf ((head E1)) T} -> progresses E1 -> progresses ((head E1)).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert (E1 = (emptyList ) \/ (exists Arg1 Arg2, E1 = (cons Arg1 Arg2))). backchain canonical_form_list. case Canonical. search. search. search. search.



Theorem progress_tail : forall E1 T, {typeOf ((tail E1)) T} -> progresses E1 -> progresses ((tail E1)).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert (E1 = (emptyList ) \/ (exists Arg1 Arg2, E1 = (cons Arg1 Arg2))). backchain canonical_form_list. case Canonical. search. search. search. search.



Theorem progress_isnil : forall E1 T, {typeOf ((isnil E1)) T} -> progresses E1 -> progresses ((isnil E1)).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert (E1 = (emptyList ) \/ (exists Arg1 Arg2, E1 = (cons Arg1 Arg2))). backchain canonical_form_list. case Canonical. search. search. search. search.



Theorem progress_tt : forall  T, {typeOf ((tt )) T} -> progresses ((tt )).
 search.



Theorem progress_ff : forall  T, {typeOf ((ff )) T} -> progresses ((ff )).
 search.



Theorem progress_if : forall E1 E2 E3 T, {typeOf ((if E1 E2 E3)) T} -> progresses E1 -> progresses ((if E1 E2 E3)).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert (E1 = (tt ) \/ E1 = (ff )). backchain canonical_form_bool. case Canonical. search. search. search. search.



Theorem progress : forall E T, {typeOf E T} -> progresses E. 
induction on 1. intros Main. E1 : case Main.
 backchain progress_emptyList.
 apply IH to E1. apply IH to E2. backchain progress_cons.
  backchain progress_tt.
  backchain progress_ff.

 apply IH to E1. backchain progress_head.
 apply IH to E1. backchain progress_tail.
 apply IH to E1. backchain progress_isnil.
 apply IH to E1. backchain progress_if.

 
 search.



Theorem preservation : forall E E' T, {step E E'} -> {typeOf E T} -> {typeOf E' T}.
induction on 1. intros Main TypeOf. Step : case Main.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). search.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). search.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). search.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). search.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). search.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). search.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). search.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf2. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 case Step. TypeOf1 : case TypeOf. case TypeOf1. search.
 case Step. TypeOf1 : case TypeOf. case TypeOf2. search.
 case Step. TypeOf1 : case TypeOf. case TypeOf1. search.
 case Step. TypeOf1 : case TypeOf. case TypeOf1. search.
 case Step. TypeOf1 : case TypeOf. case TypeOf1. search.
 case Step. TypeOf1 : case TypeOf. case TypeOf1. search.

