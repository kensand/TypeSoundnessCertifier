ocamlfind ocamlc -package batteries -linkpkg aux.ml typedLanguage.ml safeTypedLanguage.ml  proof.ml generateLambdaProlog.ml canonicalForms.ml progress.ml values.ml contextualRules.ml errorManagement.ml safeToTyped.ml typeCheckerSL.ml typeCheckerTL.ml preservationTests.ml stlc.ml pairs.ml iff.ml lists.ml listsIsNil.ml fix.ml let.ml letrec.ml sums.ml unitt.ml absImpl.ml exception.ml listsWithExc.ml tuples.ml forall.ml fullFledged.ml test.ml

#use "topfind";;
#require "batteries";;
open Batteries;;
#load "unix.cma";;

#load  "aux.cmo";;
#load  "typedLanguage.cmo" ;;
#load  "safeTypedLanguage.cmo" ;;
#load  "proof.cmo" ;;
#load  "generateLambdaProlog.cmo";;
#load  "canonicalForms.cmo";;
#load  "progress.cmo";;
#load  "values.cmo";;
#load  "contextualRules.cmo";;
#load  "errorManagement.cmo";;
#load  "safeToTyped.cmo";;
#load  "typeCheckerSL.cmo";;
#load  "typeCheckerTL.cmo";;
#load  "preservationTests.cmo";;
#load  "stlc.cmo";;
#load  "pairs.cmo";;
#load  "iff.cmo";;
#load  "lists.cmo";;
#load  "listsIsNil.cmo";;
#load  "fix.cmo";;
#load  "let.cmo";;
#load  "letrec.cmo";;
#load  "sums.cmo";;
#load  "unitt.cmo";;
#load  "absImpl.cmo";;
#load  "exception.cmo";;
#load  "listsWithExc.cmo";;
#load  "tuples.cmo";;
#load  "forall.cmo";;
#load  "fullFledged.cmo";;
#load  "test.cmo";;

open Aux;;
open TypedLanguage;;
open SafeTypedLanguage;;
open Proof;;
open GenerateLambdaProlog;;
open CanonicalForms;;
open Progress;;
open Values;;
open ContextualRules;;
open ErrorManagement;;
open SafeToTyped;;
open TypeCheckerSL;;
open TypeCheckerTL;;
open PreservationTests;;
open Stlc;;
open Pairs;;
open Iff;;
open Lists;;
open ListsIsNil;;
open Fix;;
open Let;;
open Letrec;;
open Sums;;
open Unitt;;
open AbsImpl;;
open Exception;;
open ListsWithExc;;
open Tuples;;
open Forall;;
open FullFledged;;
open Test;;


let ts = generateNonValues (generateTermPred (generateValues systemF_CBV));;
let ts = addContextualRules ts;;
print_string (generateModule ts);;
print_string (generateSignature ts);;
print_string (generateTheorem (generateEitherLemma ts));;
print_string (generateTheoremS (generateCanonicalFormsLemma ts));;
print_string progressDefinition;;
print_string (generateTheoremS (generateProgressLemmas ts));;
print_string (generateTheorem (generateProgressTheorem ts));;
print_string (generateTheorem (generatePreservationTheorem ts));;
print_string (generateTestModule ts);;
print_string (runPreservationTests ts);;


