Specification "stlc_exc".



Theorem  canonical_form_arrow : forall E T1 T2, {typeOf E (arrow T1 T2)} -> {value E} -> (exists Arg1, E = (abs Arg1)).
intros Main Value. case Main.
 search.
 case Value. case Value.
 case Value.



Theorem  canonical_form_excType : forall E, {typeOf E (excType )} -> {value E} -> E = (excValue ).
intros Main Value. case Main.
 search.
 case Value. case Value.
 case Value.



Define progresses : term -> prop by
	 progresses E := {value E} ;
	 progresses E := {error E} ;
	 progresses E := exists E', {step E E'}.

Theorem progress_app : forall E1 E2 T, {typeOf (app E1 E2) T} -> progresses E1 -> progresses (app E1 E2).
intros Main E1. case Main. ProgressClause : case E1.
 Canonical : assert ((exists Arg1, E1 = (abs Arg1))). backchain canonical_form_arrow. case Canonical. search. search. search.



Theorem progress_try : forall E1 E2 T, {typeOf (try E1 E2) T} -> progresses E1 -> progresses (try E1 E2).
intros Main E1. case Main. ProgressClause : case E1.
 search. case ProgressClause. search. search.



Theorem progress : forall E T, {typeOf E T} -> progresses E. 
induction on 1. intros Main. E1 : case Main.
search. search.
 apply IH to E1. backchain progress_app.
 apply IH to E1. backchain progress_try.

 search.



Theorem preservation : forall E E' T, {step E E'} -> {typeOf E T} -> {typeOf E' T}.
induction on 1. intros Main TypeOf. Step : case Main.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep).
  
 ToCut : inst Arg2_1 with n1 = EE. cut ToCut with Arg1_2.
 search.

 Arg1_1 : case TypeOf(keep). search. Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep).
  
 
 search.

 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf2. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 TypeOf1 : case TypeOf. apply IH to Step TypeOf1. search.
 case Step. TypeOf1 : case TypeOf. case TypeOf1. search.
 case Step. TypeOf1 : case TypeOf. case TypeOf2. search.
 case Step. TypeOf1 : case TypeOf. case TypeOf1. search.

