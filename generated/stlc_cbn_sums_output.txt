Welcome to Abella 2.0.2
Abella < Specification "stlc_cbn_sums".
Reading specification "stlc_cbn_sums"

Abella < Theorem canonical_form_arrow : 
forall E T1 T2, {typeOf E (arrow T1 T2)} -> {value E} ->
  (exists Arg1 Arg2, E = abs Arg1 Arg2).

============================
 forall E T1 T2, {typeOf E (arrow T1 T2)} -> {value E} ->
   (exists Arg1 Arg2, E = abs Arg1 Arg2)

canonical_form_arrow < intros Main Value.

Variables: E T1 T2
Main : {typeOf E (arrow T1 T2)}
Value : {value E}
============================
 exists Arg1 Arg2, E = abs Arg1 Arg2

canonical_form_arrow < case Main.
Subgoal 1:

Variables: T1 T2 R
Value : {value (abs R T1)}
H1 : {typeOf n1 T1 |- typeOf (R n1) T2}
============================
 exists Arg1 Arg2, abs R T1 = abs Arg1 Arg2

Subgoal 2 is:
 exists Arg1 Arg2, app E1 E2 = abs Arg1 Arg2

Subgoal 3 is:
 exists Arg1 Arg2, case EE R1 R2 = abs Arg1 Arg2

canonical_form_arrow < case Value.
Subgoal 1:

Variables: T1 T2 R
H1 : {typeOf n1 T1 |- typeOf (R n1) T2}
============================
 exists Arg1 Arg2, abs R T1 = abs Arg1 Arg2

Subgoal 2 is:
 exists Arg1 Arg2, app E1 E2 = abs Arg1 Arg2

Subgoal 3 is:
 exists Arg1 Arg2, case EE R1 R2 = abs Arg1 Arg2

canonical_form_arrow < search.
Subgoal 2:

Variables: T1 T2 T3 E2 E1
Value : {value (app E1 E2)}
H1 : {typeOf E1 (arrow T3 (arrow T1 T2))}
H2 : {typeOf E2 T3}
============================
 exists Arg1 Arg2, app E1 E2 = abs Arg1 Arg2

Subgoal 3 is:
 exists Arg1 Arg2, case EE R1 R2 = abs Arg1 Arg2

canonical_form_arrow < case Value.
Subgoal 3:

Variables: T1 T2 R2 T3 R1 T4 EE
Value : {value (case EE R1 R2)}
H1 : {typeOf EE (sum T4 T3)}
H2 : {typeOf n1 T4 |- typeOf (R1 n1) (arrow T1 T2)}
H3 : {typeOf n1 T3 |- typeOf (R2 n1) (arrow T1 T2)}
============================
 exists Arg1 Arg2, case EE R1 R2 = abs Arg1 Arg2

canonical_form_arrow < case Value.
Proof completed.

Abella < Theorem canonical_form_sum : 
forall E T1 T2, {typeOf E (sum T1 T2)} -> {value E} ->
  (exists Arg1, E = inl Arg1 /\ {value Arg1}) \/
  (exists Arg1, E = inr Arg1 /\ {value Arg1}).

============================
 forall E T1 T2, {typeOf E (sum T1 T2)} -> {value E} ->
   (exists Arg1, E = inl Arg1 /\ {value Arg1}) \/
   (exists Arg1, E = inr Arg1 /\ {value Arg1})

canonical_form_sum < intros Main Value.

Variables: E T1 T2
Main : {typeOf E (sum T1 T2)}
Value : {value E}
============================
 (exists Arg1, E = inl Arg1 /\ {value Arg1}) \/
   (exists Arg1, E = inr Arg1 /\ {value Arg1})

canonical_form_sum < case Main.
Subgoal 1:

Variables: T1 T2 E1
Value : {value (inl E1)}
H1 : {typeOf E1 T1}
============================
 (exists Arg1, inl E1 = inl Arg1 /\ {value Arg1}) \/
   (exists Arg1, inl E1 = inr Arg1 /\ {value Arg1})

Subgoal 2 is:
 (exists Arg1, inr E1 = inl Arg1 /\ {value Arg1}) \/
   (exists Arg1, inr E1 = inr Arg1 /\ {value Arg1})

Subgoal 3 is:
 (exists Arg1, app E1 E2 = inl Arg1 /\ {value Arg1}) \/
   (exists Arg1, app E1 E2 = inr Arg1 /\ {value Arg1})

Subgoal 4 is:
 (exists Arg1, case EE R1 R2 = inl Arg1 /\ {value Arg1}) \/
   (exists Arg1, case EE R1 R2 = inr Arg1 /\ {value Arg1})

canonical_form_sum < case Value.
Subgoal 1:

Variables: T1 T2 E1
H1 : {typeOf E1 T1}
H2 : {value E1}
============================
 (exists Arg1, inl E1 = inl Arg1 /\ {value Arg1}) \/
   (exists Arg1, inl E1 = inr Arg1 /\ {value Arg1})

Subgoal 2 is:
 (exists Arg1, inr E1 = inl Arg1 /\ {value Arg1}) \/
   (exists Arg1, inr E1 = inr Arg1 /\ {value Arg1})

Subgoal 3 is:
 (exists Arg1, app E1 E2 = inl Arg1 /\ {value Arg1}) \/
   (exists Arg1, app E1 E2 = inr Arg1 /\ {value Arg1})

Subgoal 4 is:
 (exists Arg1, case EE R1 R2 = inl Arg1 /\ {value Arg1}) \/
   (exists Arg1, case EE R1 R2 = inr Arg1 /\ {value Arg1})

canonical_form_sum < search.
Subgoal 2:

Variables: T1 T2 E1
Value : {value (inr E1)}
H1 : {typeOf E1 T2}
============================
 (exists Arg1, inr E1 = inl Arg1 /\ {value Arg1}) \/
   (exists Arg1, inr E1 = inr Arg1 /\ {value Arg1})

Subgoal 3 is:
 (exists Arg1, app E1 E2 = inl Arg1 /\ {value Arg1}) \/
   (exists Arg1, app E1 E2 = inr Arg1 /\ {value Arg1})

Subgoal 4 is:
 (exists Arg1, case EE R1 R2 = inl Arg1 /\ {value Arg1}) \/
   (exists Arg1, case EE R1 R2 = inr Arg1 /\ {value Arg1})

canonical_form_sum < case Value.
Subgoal 2:

Variables: T1 T2 E1
H1 : {typeOf E1 T2}
H2 : {value E1}
============================
 (exists Arg1, inr E1 = inl Arg1 /\ {value Arg1}) \/
   (exists Arg1, inr E1 = inr Arg1 /\ {value Arg1})

Subgoal 3 is:
 (exists Arg1, app E1 E2 = inl Arg1 /\ {value Arg1}) \/
   (exists Arg1, app E1 E2 = inr Arg1 /\ {value Arg1})

Subgoal 4 is:
 (exists Arg1, case EE R1 R2 = inl Arg1 /\ {value Arg1}) \/
   (exists Arg1, case EE R1 R2 = inr Arg1 /\ {value Arg1})

canonical_form_sum < search.
Subgoal 3:

Variables: T1 T2 T3 E2 E1
Value : {value (app E1 E2)}
H1 : {typeOf E1 (arrow T3 (sum T1 T2))}
H2 : {typeOf E2 T3}
============================
 (exists Arg1, app E1 E2 = inl Arg1 /\ {value Arg1}) \/
   (exists Arg1, app E1 E2 = inr Arg1 /\ {value Arg1})

Subgoal 4 is:
 (exists Arg1, case EE R1 R2 = inl Arg1 /\ {value Arg1}) \/
   (exists Arg1, case EE R1 R2 = inr Arg1 /\ {value Arg1})

canonical_form_sum < case Value.
Subgoal 4:

Variables: T1 T2 R2 T3 R1 T4 EE
Value : {value (case EE R1 R2)}
H1 : {typeOf EE (sum T4 T3)}
H2 : {typeOf n1 T4 |- typeOf (R1 n1) (sum T1 T2)}
H3 : {typeOf n1 T3 |- typeOf (R2 n1) (sum T1 T2)}
============================
 (exists Arg1, case EE R1 R2 = inl Arg1 /\ {value Arg1}) \/
   (exists Arg1, case EE R1 R2 = inr Arg1 /\ {value Arg1})

canonical_form_sum < case Value.
Proof completed.

Abella < Define progresses : term -> prop by 
progresses E := {value E};
progresses E := exists E', {step E E'}.

Abella < Theorem progress_abs : 
forall R1 T2 T, {typeOf (abs R1 T2) T} -> progresses (abs R1 T2).

============================
 forall R1 T2 T, {typeOf (abs R1 T2) T} -> progresses (abs R1 T2)

progress_abs < search.
Proof completed.

Abella < Theorem progress_app : 
forall E1 E2 T, {typeOf (app E1 E2) T} -> progresses E1 ->
  progresses (app E1 E2).

============================
 forall E1 E2 T, {typeOf (app E1 E2) T} -> progresses E1 ->
   progresses (app E1 E2)

progress_app < intros Main PrgsE1.

Variables: E1 E2 T
Main : {typeOf (app E1 E2) T}
PrgsE1 : progresses E1
============================
 progresses (app E1 E2)

progress_app < case TypeOfE1 : Main.

Variables: E1 E2 T T1
PrgsE1 : progresses E1
TypeOfE1 : {typeOf E1 (arrow T1 T)}
TypeOfE2 : {typeOf E2 T1}
============================
 progresses (app E1 E2)

progress_app < case ProgressClause : PrgsE1.
Subgoal 1:

Variables: E1 E2 T T1
TypeOfE1 : {typeOf E1 (arrow T1 T)}
TypeOfE2 : {typeOf E2 T1}
ProgressClause : {value E1}
============================
 progresses (app E1 E2)

Subgoal 2 is:
 progresses (app E1 E2)

progress_app < apply Canonical : canonical_form_arrow to TypeOfE1 ProgressClause.
Subgoal 1:

Variables: E2 T T1 Arg1 Arg2
TypeOfE1 : {typeOf (abs Arg1 Arg2) (arrow T1 T)}
TypeOfE2 : {typeOf E2 T1}
ProgressClause : {value (abs Arg1 Arg2)}
============================
 progresses (app (abs Arg1 Arg2) E2)

Subgoal 2 is:
 progresses (app E1 E2)

progress_app < search.
Subgoal 2:

Variables: E1 E2 T T1 E'
TypeOfE1 : {typeOf E1 (arrow T1 T)}
TypeOfE2 : {typeOf E2 T1}
ProgressClause : {step E1 E'}
============================
 progresses (app E1 E2)

progress_app < search.
Proof completed.

Abella < Theorem progress_inl : 
forall E1 T, {typeOf (inl E1) T} -> progresses E1 -> progresses (inl E1).

============================
 forall E1 T, {typeOf (inl E1) T} -> progresses E1 -> progresses (inl E1)

progress_inl < intros Main PrgsE1.

Variables: E1 T
Main : {typeOf (inl E1) T}
PrgsE1 : progresses E1
============================
 progresses (inl E1)

progress_inl < case TypeOfE1 : Main.

Variables: E1 T1 T2
PrgsE1 : progresses E1
TypeOfE1 : {typeOf E1 T1}
============================
 progresses (inl E1)

progress_inl < case ProgressClause : PrgsE1.
Subgoal 1:

Variables: E1 T1 T2
TypeOfE1 : {typeOf E1 T1}
ProgressClause : {value E1}
============================
 progresses (inl E1)

Subgoal 2 is:
 progresses (inl E1)

progress_inl < search.
Subgoal 2:

Variables: E1 T1 T2 E'
TypeOfE1 : {typeOf E1 T1}
ProgressClause : {step E1 E'}
============================
 progresses (inl E1)

progress_inl < search.
Proof completed.

Abella < Theorem progress_inr : 
forall E1 T, {typeOf (inr E1) T} -> progresses E1 -> progresses (inr E1).

============================
 forall E1 T, {typeOf (inr E1) T} -> progresses E1 -> progresses (inr E1)

progress_inr < intros Main PrgsE1.

Variables: E1 T
Main : {typeOf (inr E1) T}
PrgsE1 : progresses E1
============================
 progresses (inr E1)

progress_inr < case TypeOfE1 : Main.

Variables: E1 T2 T1
PrgsE1 : progresses E1
TypeOfE1 : {typeOf E1 T2}
============================
 progresses (inr E1)

progress_inr < case ProgressClause : PrgsE1.
Subgoal 1:

Variables: E1 T2 T1
TypeOfE1 : {typeOf E1 T2}
ProgressClause : {value E1}
============================
 progresses (inr E1)

Subgoal 2 is:
 progresses (inr E1)

progress_inr < search.
Subgoal 2:

Variables: E1 T2 T1 E'
TypeOfE1 : {typeOf E1 T2}
ProgressClause : {step E1 E'}
============================
 progresses (inr E1)

progress_inr < search.
Proof completed.

Abella < Theorem progress_case : 
forall E1 R2 R3 T, {typeOf (case E1 R2 R3) T} -> progresses E1 ->
  progresses (case E1 R2 R3).

============================
 forall E1 R2 R3 T, {typeOf (case E1 R2 R3) T} -> progresses E1 ->
   progresses (case E1 R2 R3)

progress_case < intros Main PrgsE1.

Variables: E1 R2 R3 T
Main : {typeOf (case E1 R2 R3) T}
PrgsE1 : progresses E1
============================
 progresses (case E1 R2 R3)

progress_case < case TypeOfE1 : Main.

Variables: E1 R2 R3 T T2 T1
PrgsE1 : progresses E1
TypeOfE1 : {typeOf E1 (sum T1 T2)}
TypeOfE2 : {typeOf n1 T1 |- typeOf (R2 n1) T}
TypeOfE3 : {typeOf n1 T2 |- typeOf (R3 n1) T}
============================
 progresses (case E1 R2 R3)

progress_case < case ProgressClause : PrgsE1.
Subgoal 1:

Variables: E1 R2 R3 T T2 T1
TypeOfE1 : {typeOf E1 (sum T1 T2)}
TypeOfE2 : {typeOf n1 T1 |- typeOf (R2 n1) T}
TypeOfE3 : {typeOf n1 T2 |- typeOf (R3 n1) T}
ProgressClause : {value E1}
============================
 progresses (case E1 R2 R3)

Subgoal 2 is:
 progresses (case E1 R2 R3)

progress_case < apply Canonical : canonical_form_sum to TypeOfE1 ProgressClause.
Subgoal 1:

Variables: E1 R2 R3 T T2 T1
TypeOfE1 : {typeOf E1 (sum T1 T2)}
TypeOfE2 : {typeOf n1 T1 |- typeOf (R2 n1) T}
TypeOfE3 : {typeOf n1 T2 |- typeOf (R3 n1) T}
ProgressClause : {value E1}
Canonical : (exists Arg1, E1 = inl Arg1 /\ {value Arg1}) \/
              (exists Arg1, E1 = inr Arg1 /\ {value Arg1})
============================
 progresses (case E1 R2 R3)

Subgoal 2 is:
 progresses (case E1 R2 R3)

progress_case < case Canonical.
Subgoal 1.1:

Variables: R2 R3 T T2 T1 Arg1
TypeOfE1 : {typeOf (inl Arg1) (sum T1 T2)}
TypeOfE2 : {typeOf n1 T1 |- typeOf (R2 n1) T}
TypeOfE3 : {typeOf n1 T2 |- typeOf (R3 n1) T}
ProgressClause : {value (inl Arg1)}
H1 : {value Arg1}
============================
 progresses (case (inl Arg1) R2 R3)

Subgoal 1.2 is:
 progresses (case (inr Arg1) R2 R3)

Subgoal 2 is:
 progresses (case E1 R2 R3)

progress_case < search.
Subgoal 1.2:

Variables: R2 R3 T T2 T1 Arg1
TypeOfE1 : {typeOf (inr Arg1) (sum T1 T2)}
TypeOfE2 : {typeOf n1 T1 |- typeOf (R2 n1) T}
TypeOfE3 : {typeOf n1 T2 |- typeOf (R3 n1) T}
ProgressClause : {value (inr Arg1)}
H1 : {value Arg1}
============================
 progresses (case (inr Arg1) R2 R3)

Subgoal 2 is:
 progresses (case E1 R2 R3)

progress_case < search.
Subgoal 2:

Variables: E1 R2 R3 T T2 T1 E'
TypeOfE1 : {typeOf E1 (sum T1 T2)}
TypeOfE2 : {typeOf n1 T1 |- typeOf (R2 n1) T}
TypeOfE3 : {typeOf n1 T2 |- typeOf (R3 n1) T}
ProgressClause : {step E1 E'}
============================
 progresses (case E1 R2 R3)

progress_case < search.
Proof completed.

Abella < Theorem progress : 
forall E T, {typeOf E T} -> progresses E.

============================
 forall E T, {typeOf E T} -> progresses E

progress < induction on 1.

IH : forall E T, {typeOf E T}* -> progresses E
============================
 forall E T, {typeOf E T}@ -> progresses E

progress < intros Main.

Variables: E T
IH : forall E T, {typeOf E T}* -> progresses E
Main : {typeOf E T}@
============================
 progresses E

progress < case TypeOfE1 : Main.
Subgoal 1:

Variables: T2 R T1
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf n1 T1 |- typeOf (R n1) T2}*
============================
 progresses (abs R T1)

Subgoal 2 is:
 progresses (inl E1)

Subgoal 3 is:
 progresses (inr E1)

Subgoal 4 is:
 progresses (app E1 E2)

Subgoal 5 is:
 progresses (case EE R1 R2)

progress < backchain progress_abs.
Subgoal 2:

Variables: T1 E1 T2
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf E1 T1}*
============================
 progresses (inl E1)

Subgoal 3 is:
 progresses (inr E1)

Subgoal 4 is:
 progresses (app E1 E2)

Subgoal 5 is:
 progresses (case EE R1 R2)

progress < apply IH to TypeOfE1.
Subgoal 2:

Variables: T1 E1 T2
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf E1 T1}*
H1 : progresses E1
============================
 progresses (inl E1)

Subgoal 3 is:
 progresses (inr E1)

Subgoal 4 is:
 progresses (app E1 E2)

Subgoal 5 is:
 progresses (case EE R1 R2)

progress < backchain progress_inl.
Subgoal 3:

Variables: T2 E1 T1
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf E1 T2}*
============================
 progresses (inr E1)

Subgoal 4 is:
 progresses (app E1 E2)

Subgoal 5 is:
 progresses (case EE R1 R2)

progress < apply IH to TypeOfE1.
Subgoal 3:

Variables: T2 E1 T1
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf E1 T2}*
H1 : progresses E1
============================
 progresses (inr E1)

Subgoal 4 is:
 progresses (app E1 E2)

Subgoal 5 is:
 progresses (case EE R1 R2)

progress < backchain progress_inr.
Subgoal 4:

Variables: T T1 E2 E1
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf E1 (arrow T1 T)}*
TypeOfE2 : {typeOf E2 T1}*
============================
 progresses (app E1 E2)

Subgoal 5 is:
 progresses (case EE R1 R2)

progress < apply IH to TypeOfE1.
Subgoal 4:

Variables: T T1 E2 E1
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf E1 (arrow T1 T)}*
TypeOfE2 : {typeOf E2 T1}*
H1 : progresses E1
============================
 progresses (app E1 E2)

Subgoal 5 is:
 progresses (case EE R1 R2)

progress < backchain progress_app.
Subgoal 5:

Variables: T R2 T2 R1 T1 EE
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf EE (sum T1 T2)}*
TypeOfE2 : {typeOf n1 T1 |- typeOf (R1 n1) T}*
TypeOfE3 : {typeOf n1 T2 |- typeOf (R2 n1) T}*
============================
 progresses (case EE R1 R2)

progress < apply IH to TypeOfE1.
Subgoal 5:

Variables: T R2 T2 R1 T1 EE
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf EE (sum T1 T2)}*
TypeOfE2 : {typeOf n1 T1 |- typeOf (R1 n1) T}*
TypeOfE3 : {typeOf n1 T2 |- typeOf (R2 n1) T}*
H1 : progresses EE
============================
 progresses (case EE R1 R2)

progress < backchain progress_case.
Proof completed.

Abella < Theorem preservation : 
forall E E' T, {typeOf E T} -> {step E E'} -> {typeOf E' T}.

============================
 forall E E' T, {typeOf E T} -> {step E E'} -> {typeOf E' T}

preservation < induction on 2.

IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
============================
 forall E E' T, {typeOf E T} -> {step E E'}@ -> {typeOf E' T}

preservation < intros TypeOf Main.

Variables: E E' T
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf E T}
Main : {step E E'}@
============================
 {typeOf E' T}

preservation < case Step : Main.
Subgoal 1:

Variables: T EE R T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (app (abs R T1) EE) T}
============================
 {typeOf (R EE) T}

Subgoal 2 is:
 {typeOf (R1 EE) T}

Subgoal 3 is:
 {typeOf (R2 EE) T}

Subgoal 4 is:
 {typeOf (inl E1') T}

Subgoal 5 is:
 {typeOf (inr E1') T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < case Arg1_1 : TypeOf (keep).
Subgoal 1:

Variables: T EE R T1 T2
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (app (abs R T1) EE) T}
Arg1_1 : {typeOf (abs R T1) (arrow T2 T)}
Arg1_2 : {typeOf EE T2}
============================
 {typeOf (R EE) T}

Subgoal 2 is:
 {typeOf (R1 EE) T}

Subgoal 3 is:
 {typeOf (R2 EE) T}

Subgoal 4 is:
 {typeOf (inl E1') T}

Subgoal 5 is:
 {typeOf (inr E1') T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < case Arg2_1 : Arg1_1 (keep).
Subgoal 1:

Variables: T EE R T2
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (app (abs R T2) EE) T}
Arg1_1 : {typeOf (abs R T2) (arrow T2 T)}
Arg1_2 : {typeOf EE T2}
Arg2_1 : {typeOf n1 T2 |- typeOf (R n1) T}
============================
 {typeOf (R EE) T}

Subgoal 2 is:
 {typeOf (R1 EE) T}

Subgoal 3 is:
 {typeOf (R2 EE) T}

Subgoal 4 is:
 {typeOf (inl E1') T}

Subgoal 5 is:
 {typeOf (inr E1') T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < inst ToCut : Arg2_1 with n1 = EE.
Subgoal 1:

Variables: T EE R T2
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (app (abs R T2) EE) T}
Arg1_1 : {typeOf (abs R T2) (arrow T2 T)}
Arg1_2 : {typeOf EE T2}
Arg2_1 : {typeOf n1 T2 |- typeOf (R n1) T}
ToCut : {typeOf EE T2 |- typeOf (R EE) T}
============================
 {typeOf (R EE) T}

Subgoal 2 is:
 {typeOf (R1 EE) T}

Subgoal 3 is:
 {typeOf (R2 EE) T}

Subgoal 4 is:
 {typeOf (inl E1') T}

Subgoal 5 is:
 {typeOf (inr E1') T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < cut ToCut with Arg1_2.
Subgoal 1:

Variables: T EE R T2
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (app (abs R T2) EE) T}
Arg1_1 : {typeOf (abs R T2) (arrow T2 T)}
Arg1_2 : {typeOf EE T2}
Arg2_1 : {typeOf n1 T2 |- typeOf (R n1) T}
ToCut : {typeOf EE T2 |- typeOf (R EE) T}
H1 : {typeOf (R EE) T}
============================
 {typeOf (R EE) T}

Subgoal 2 is:
 {typeOf (R1 EE) T}

Subgoal 3 is:
 {typeOf (R2 EE) T}

Subgoal 4 is:
 {typeOf (inl E1') T}

Subgoal 5 is:
 {typeOf (inr E1') T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < search.
Subgoal 2:

Variables: T EE R1 R2
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (case (inl EE) R1 R2) T}
============================
 {typeOf (R1 EE) T}

Subgoal 3 is:
 {typeOf (R2 EE) T}

Subgoal 4 is:
 {typeOf (inl E1') T}

Subgoal 5 is:
 {typeOf (inr E1') T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < case Arg1_1 : TypeOf (keep).
Subgoal 2:

Variables: T EE R1 R2 T2 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (case (inl EE) R1 R2) T}
Arg1_1 : {typeOf (inl EE) (sum T1 T2)}
Arg1_2 : {typeOf n1 T1 |- typeOf (R1 n1) T}
Arg1_3 : {typeOf n1 T2 |- typeOf (R2 n1) T}
============================
 {typeOf (R1 EE) T}

Subgoal 3 is:
 {typeOf (R2 EE) T}

Subgoal 4 is:
 {typeOf (inl E1') T}

Subgoal 5 is:
 {typeOf (inr E1') T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < case Arg2_1 : Arg1_1 (keep).
Subgoal 2:

Variables: T EE R1 R2 T2 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (case (inl EE) R1 R2) T}
Arg1_1 : {typeOf (inl EE) (sum T1 T2)}
Arg1_2 : {typeOf n1 T1 |- typeOf (R1 n1) T}
Arg1_3 : {typeOf n1 T2 |- typeOf (R2 n1) T}
Arg2_1 : {typeOf EE T1}
============================
 {typeOf (R1 EE) T}

Subgoal 3 is:
 {typeOf (R2 EE) T}

Subgoal 4 is:
 {typeOf (inl E1') T}

Subgoal 5 is:
 {typeOf (inr E1') T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < inst ToCut : Arg1_2 with n1 = EE.
Subgoal 2:

Variables: T EE R1 R2 T2 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (case (inl EE) R1 R2) T}
Arg1_1 : {typeOf (inl EE) (sum T1 T2)}
Arg1_2 : {typeOf n1 T1 |- typeOf (R1 n1) T}
Arg1_3 : {typeOf n1 T2 |- typeOf (R2 n1) T}
Arg2_1 : {typeOf EE T1}
ToCut : {typeOf EE T1 |- typeOf (R1 EE) T}
============================
 {typeOf (R1 EE) T}

Subgoal 3 is:
 {typeOf (R2 EE) T}

Subgoal 4 is:
 {typeOf (inl E1') T}

Subgoal 5 is:
 {typeOf (inr E1') T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < cut ToCut with Arg2_1.
Subgoal 2:

Variables: T EE R1 R2 T2 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (case (inl EE) R1 R2) T}
Arg1_1 : {typeOf (inl EE) (sum T1 T2)}
Arg1_2 : {typeOf n1 T1 |- typeOf (R1 n1) T}
Arg1_3 : {typeOf n1 T2 |- typeOf (R2 n1) T}
Arg2_1 : {typeOf EE T1}
ToCut : {typeOf EE T1 |- typeOf (R1 EE) T}
H1 : {typeOf (R1 EE) T}
============================
 {typeOf (R1 EE) T}

Subgoal 3 is:
 {typeOf (R2 EE) T}

Subgoal 4 is:
 {typeOf (inl E1') T}

Subgoal 5 is:
 {typeOf (inr E1') T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < search.
Subgoal 3:

Variables: T EE R2 R1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (case (inr EE) R1 R2) T}
============================
 {typeOf (R2 EE) T}

Subgoal 4 is:
 {typeOf (inl E1') T}

Subgoal 5 is:
 {typeOf (inr E1') T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < case Arg1_1 : TypeOf (keep).
Subgoal 3:

Variables: T EE R2 R1 T2 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (case (inr EE) R1 R2) T}
Arg1_1 : {typeOf (inr EE) (sum T1 T2)}
Arg1_2 : {typeOf n1 T1 |- typeOf (R1 n1) T}
Arg1_3 : {typeOf n1 T2 |- typeOf (R2 n1) T}
============================
 {typeOf (R2 EE) T}

Subgoal 4 is:
 {typeOf (inl E1') T}

Subgoal 5 is:
 {typeOf (inr E1') T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < case Arg2_1 : Arg1_1 (keep).
Subgoal 3:

Variables: T EE R2 R1 T2 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (case (inr EE) R1 R2) T}
Arg1_1 : {typeOf (inr EE) (sum T1 T2)}
Arg1_2 : {typeOf n1 T1 |- typeOf (R1 n1) T}
Arg1_3 : {typeOf n1 T2 |- typeOf (R2 n1) T}
Arg2_1 : {typeOf EE T2}
============================
 {typeOf (R2 EE) T}

Subgoal 4 is:
 {typeOf (inl E1') T}

Subgoal 5 is:
 {typeOf (inr E1') T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < inst ToCut : Arg1_3 with n1 = EE.
Subgoal 3:

Variables: T EE R2 R1 T2 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (case (inr EE) R1 R2) T}
Arg1_1 : {typeOf (inr EE) (sum T1 T2)}
Arg1_2 : {typeOf n1 T1 |- typeOf (R1 n1) T}
Arg1_3 : {typeOf n1 T2 |- typeOf (R2 n1) T}
Arg2_1 : {typeOf EE T2}
ToCut : {typeOf EE T2 |- typeOf (R2 EE) T}
============================
 {typeOf (R2 EE) T}

Subgoal 4 is:
 {typeOf (inl E1') T}

Subgoal 5 is:
 {typeOf (inr E1') T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < cut ToCut with Arg2_1.
Subgoal 3:

Variables: T EE R2 R1 T2 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (case (inr EE) R1 R2) T}
Arg1_1 : {typeOf (inr EE) (sum T1 T2)}
Arg1_2 : {typeOf n1 T1 |- typeOf (R1 n1) T}
Arg1_3 : {typeOf n1 T2 |- typeOf (R2 n1) T}
Arg2_1 : {typeOf EE T2}
ToCut : {typeOf EE T2 |- typeOf (R2 EE) T}
H1 : {typeOf (R2 EE) T}
============================
 {typeOf (R2 EE) T}

Subgoal 4 is:
 {typeOf (inl E1') T}

Subgoal 5 is:
 {typeOf (inr E1') T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < search.
Subgoal 4:

Variables: T E1' E1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (inl E1) T}
Step : {step E1 E1'}*
============================
 {typeOf (inl E1') T}

Subgoal 5 is:
 {typeOf (inr E1') T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < case TypeOf1 : TypeOf.
Subgoal 4:

Variables: E1' E1 T1 T2
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 T1}
============================
 {typeOf (inl E1') (sum T1 T2)}

Subgoal 5 is:
 {typeOf (inr E1') T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < apply IH to TypeOf1 Step.
Subgoal 4:

Variables: E1' E1 T1 T2
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 T1}
H1 : {typeOf E1' T1}
============================
 {typeOf (inl E1') (sum T1 T2)}

Subgoal 5 is:
 {typeOf (inr E1') T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < search.
Subgoal 5:

Variables: T E1' E1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (inr E1) T}
Step : {step E1 E1'}*
============================
 {typeOf (inr E1') T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < case TypeOf1 : TypeOf.
Subgoal 5:

Variables: E1' E1 T2 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 T2}
============================
 {typeOf (inr E1') (sum T1 T2)}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < apply IH to TypeOf1 Step.
Subgoal 5:

Variables: E1' E1 T2 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 T2}
H1 : {typeOf E1' T2}
============================
 {typeOf (inr E1') (sum T1 T2)}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < search.
Subgoal 6:

Variables: T E1' E1 E2
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (app E1 E2) T}
Step : {step E1 E1'}*
============================
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < case TypeOf1 : TypeOf.
Subgoal 6:

Variables: T E1' E1 E2 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 (arrow T1 T)}
TypeOf2 : {typeOf E2 T1}
============================
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < apply IH to TypeOf1 Step.
Subgoal 6:

Variables: T E1' E1 E2 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 (arrow T1 T)}
TypeOf2 : {typeOf E2 T1}
H1 : {typeOf E1' (arrow T1 T)}
============================
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (case E1' R2 R3) T}

preservation < search.
Subgoal 7:

Variables: T E1' E1 R3 R2
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (case E1 R2 R3) T}
Step : {step E1 E1'}*
============================
 {typeOf (case E1' R2 R3) T}

preservation < case TypeOf1 : TypeOf.
Subgoal 7:

Variables: T E1' E1 R3 R2 T2 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 (sum T1 T2)}
TypeOf2 : {typeOf n1 T1 |- typeOf (R2 n1) T}
TypeOf3 : {typeOf n1 T2 |- typeOf (R3 n1) T}
============================
 {typeOf (case E1' R2 R3) T}

preservation < apply IH to TypeOf1 Step.
Subgoal 7:

Variables: T E1' E1 R3 R2 T2 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 (sum T1 T2)}
TypeOf2 : {typeOf n1 T1 |- typeOf (R2 n1) T}
TypeOf3 : {typeOf n1 T2 |- typeOf (R3 n1) T}
H1 : {typeOf E1' (sum T1 T2)}
============================
 {typeOf (case E1' R2 R3) T}

preservation < search.
Proof completed.

Abella < Theorem type_soundness : 
forall E E' T, {typeOf E T} -> {nstep E E'} -> progresses E'.

============================
 forall E E' T, {typeOf E T} -> {nstep E E'} -> progresses E'

type_soundness < induction on 2.

IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
============================
 forall E E' T, {typeOf E T} -> {nstep E E'}@ -> progresses E'

type_soundness < intros Main NStep.

Variables: E E' T
IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
Main : {typeOf E T}
NStep : {nstep E E'}@
============================
 progresses E'

type_soundness < case Step1 : NStep.
Subgoal 1:

Variables: E' T
IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
Main : {typeOf E' T}
============================
 progresses E'

Subgoal 2 is:
 progresses E'

type_soundness < backchain progress.
Subgoal 2:

Variables: E E' T E2
IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
Main : {typeOf E T}
Step1 : {step E E2}*
Step2 : {nstep E2 E'}*
============================
 progresses E'

type_soundness < apply TypeOfE2 : preservation to Main Step1.
Subgoal 2:

Variables: E E' T E2
IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
Main : {typeOf E T}
Step1 : {step E E2}*
Step2 : {nstep E2 E'}*
TypeOfE2 : {typeOf E2 T}
============================
 progresses E'

type_soundness < backchain IH with E = E2.
Proof completed.

Abella < Goodbye.
