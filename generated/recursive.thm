Specification "recursive".



Theorem  canonical_form_mu : forall E U1, {typeOf E (mu U1)} -> {value E} -> (exists Arg1 Arg2, E = (fold Arg1 Arg2) /\ {value Arg1}).
intros Main Value. case Main.
 case Value. search.

 case Value.
 




Define progresses : term -> prop by
	 progresses E := {value E} ;
	 progresses E := exists E', {step E E'}.

Theorem progress_fold : forall E1 U2 T, {typeOf ((fold E1 U2)) T} -> progresses E1 -> progresses ((fold E1 U2)).
intros Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 search. search.



Theorem progress_unfold : forall E1 T, {typeOf ((unfold E1)) T} -> progresses E1 -> progresses ((unfold E1)).
intros Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_mu to TypeOfE1 ProgressClause.  search. search.





Theorem progress : forall E T, {typeOf E T} -> progresses E. 
induction on 1. intros Main. TypeOfE1 : case Main.
apply IH to TypeOfE1. backchain progress_fold.

 apply IH to TypeOfE1. backchain progress_unfold.

 
 


Theorem preservation : forall E E' T, {typeOf E T} -> {step E E'} -> {typeOf E' T}.
induction on 2. intros TypeOf Main. Step : case Main.
 Arg1_1 : case TypeOf(keep). Arg2_1 : case Arg1_1(keep). search.
 TypeOf1 : case TypeOf. apply IH to TypeOf1 Step. search.
 TypeOf1 : case TypeOf. apply IH to TypeOf1 Step. search.



Theorem type_soundness : forall E E' T, {typeOf E T} -> {nstep E E'} -> progresses E'. 

induction on 2. intros Main NStep. Step1 : case NStep. 

backchain progress. 

TypeOfE2: apply preservation to Main Step1. backchain IH with E = E2.
