Welcome to Abella 2.0.2
Abella < Specification "stlc_cbn_lists_lazy".
Reading specification "stlc_cbn_lists_lazy"

Abella < Theorem canonical_form_arrow : 
forall E T1 T2, {typeOf E (arrow T1 T2)} -> {value E} ->
  (exists Arg1 Arg2, E = abs Arg1 Arg2).

============================
 forall E T1 T2, {typeOf E (arrow T1 T2)} -> {value E} ->
   (exists Arg1 Arg2, E = abs Arg1 Arg2)

canonical_form_arrow < intros Main Value.

Variables: E T1 T2
Main : {typeOf E (arrow T1 T2)}
Value : {value E}
============================
 exists Arg1 Arg2, E = abs Arg1 Arg2

canonical_form_arrow < case Main.
Subgoal 1:

Variables: T1 T2 R
Value : {value (abs R T1)}
H1 : {typeOf n1 T1 |- typeOf (R n1) T2}
============================
 exists Arg1 Arg2, abs R T1 = abs Arg1 Arg2

Subgoal 2 is:
 exists Arg1 Arg2, app E1 E2 = abs Arg1 Arg2

Subgoal 3 is:
 exists Arg1 Arg2, head E1 = abs Arg1 Arg2

Subgoal 4 is:
 exists Arg1 Arg2, myError = abs Arg1 Arg2

canonical_form_arrow < case Value.
Subgoal 1:

Variables: T1 T2 R
H1 : {typeOf n1 T1 |- typeOf (R n1) T2}
============================
 exists Arg1 Arg2, abs R T1 = abs Arg1 Arg2

Subgoal 2 is:
 exists Arg1 Arg2, app E1 E2 = abs Arg1 Arg2

Subgoal 3 is:
 exists Arg1 Arg2, head E1 = abs Arg1 Arg2

Subgoal 4 is:
 exists Arg1 Arg2, myError = abs Arg1 Arg2

canonical_form_arrow < search.
Subgoal 2:

Variables: T1 T2 T3 E2 E1
Value : {value (app E1 E2)}
H1 : {typeOf E1 (arrow T3 (arrow T1 T2))}
H2 : {typeOf E2 T3}
============================
 exists Arg1 Arg2, app E1 E2 = abs Arg1 Arg2

Subgoal 3 is:
 exists Arg1 Arg2, head E1 = abs Arg1 Arg2

Subgoal 4 is:
 exists Arg1 Arg2, myError = abs Arg1 Arg2

canonical_form_arrow < case Value.
Subgoal 3:

Variables: T1 T2 E1
Value : {value (head E1)}
H1 : {typeOf E1 (list (arrow T1 T2))}
============================
 exists Arg1 Arg2, head E1 = abs Arg1 Arg2

Subgoal 4 is:
 exists Arg1 Arg2, myError = abs Arg1 Arg2

canonical_form_arrow < case Value.
Subgoal 4:

Variables: T1 T2
Value : {value myError}
============================
 exists Arg1 Arg2, myError = abs Arg1 Arg2

canonical_form_arrow < case Value.
Proof completed.

Abella < Theorem canonical_form_list : 
forall E T1, {typeOf E (list T1)} -> {value E} -> E = emptyList \/
  (exists Arg1 Arg2, E = cons Arg1 Arg2).

============================
 forall E T1, {typeOf E (list T1)} -> {value E} -> E = emptyList \/
   (exists Arg1 Arg2, E = cons Arg1 Arg2)

canonical_form_list < intros Main Value.

Variables: E T1
Main : {typeOf E (list T1)}
Value : {value E}
============================
 E = emptyList \/ (exists Arg1 Arg2, E = cons Arg1 Arg2)

canonical_form_list < case Main.
Subgoal 1:

Variables: T1
Value : {value emptyList}
============================
 emptyList = emptyList \/ (exists Arg1 Arg2, emptyList = cons Arg1 Arg2)

Subgoal 2 is:
 cons E1 E2 = emptyList \/ (exists Arg1 Arg2, cons E1 E2 = cons Arg1 Arg2)

Subgoal 3 is:
 app E1 E2 = emptyList \/ (exists Arg1 Arg2, app E1 E2 = cons Arg1 Arg2)

Subgoal 4 is:
 head E1 = emptyList \/ (exists Arg1 Arg2, head E1 = cons Arg1 Arg2)

Subgoal 5 is:
 tail E1 = emptyList \/ (exists Arg1 Arg2, tail E1 = cons Arg1 Arg2)

Subgoal 6 is:
 myError = emptyList \/ (exists Arg1 Arg2, myError = cons Arg1 Arg2)

canonical_form_list < case Value.
Subgoal 1:

Variables: T1
============================
 emptyList = emptyList \/ (exists Arg1 Arg2, emptyList = cons Arg1 Arg2)

Subgoal 2 is:
 cons E1 E2 = emptyList \/ (exists Arg1 Arg2, cons E1 E2 = cons Arg1 Arg2)

Subgoal 3 is:
 app E1 E2 = emptyList \/ (exists Arg1 Arg2, app E1 E2 = cons Arg1 Arg2)

Subgoal 4 is:
 head E1 = emptyList \/ (exists Arg1 Arg2, head E1 = cons Arg1 Arg2)

Subgoal 5 is:
 tail E1 = emptyList \/ (exists Arg1 Arg2, tail E1 = cons Arg1 Arg2)

Subgoal 6 is:
 myError = emptyList \/ (exists Arg1 Arg2, myError = cons Arg1 Arg2)

canonical_form_list < search.
Subgoal 2:

Variables: T1 E2 E1
Value : {value (cons E1 E2)}
H1 : {typeOf E1 T1}
H2 : {typeOf E2 (list T1)}
============================
 cons E1 E2 = emptyList \/ (exists Arg1 Arg2, cons E1 E2 = cons Arg1 Arg2)

Subgoal 3 is:
 app E1 E2 = emptyList \/ (exists Arg1 Arg2, app E1 E2 = cons Arg1 Arg2)

Subgoal 4 is:
 head E1 = emptyList \/ (exists Arg1 Arg2, head E1 = cons Arg1 Arg2)

Subgoal 5 is:
 tail E1 = emptyList \/ (exists Arg1 Arg2, tail E1 = cons Arg1 Arg2)

Subgoal 6 is:
 myError = emptyList \/ (exists Arg1 Arg2, myError = cons Arg1 Arg2)

canonical_form_list < case Value.
Subgoal 2:

Variables: T1 E2 E1
H1 : {typeOf E1 T1}
H2 : {typeOf E2 (list T1)}
============================
 cons E1 E2 = emptyList \/ (exists Arg1 Arg2, cons E1 E2 = cons Arg1 Arg2)

Subgoal 3 is:
 app E1 E2 = emptyList \/ (exists Arg1 Arg2, app E1 E2 = cons Arg1 Arg2)

Subgoal 4 is:
 head E1 = emptyList \/ (exists Arg1 Arg2, head E1 = cons Arg1 Arg2)

Subgoal 5 is:
 tail E1 = emptyList \/ (exists Arg1 Arg2, tail E1 = cons Arg1 Arg2)

Subgoal 6 is:
 myError = emptyList \/ (exists Arg1 Arg2, myError = cons Arg1 Arg2)

canonical_form_list < search.
Subgoal 3:

Variables: T1 T2 E2 E1
Value : {value (app E1 E2)}
H1 : {typeOf E1 (arrow T2 (list T1))}
H2 : {typeOf E2 T2}
============================
 app E1 E2 = emptyList \/ (exists Arg1 Arg2, app E1 E2 = cons Arg1 Arg2)

Subgoal 4 is:
 head E1 = emptyList \/ (exists Arg1 Arg2, head E1 = cons Arg1 Arg2)

Subgoal 5 is:
 tail E1 = emptyList \/ (exists Arg1 Arg2, tail E1 = cons Arg1 Arg2)

Subgoal 6 is:
 myError = emptyList \/ (exists Arg1 Arg2, myError = cons Arg1 Arg2)

canonical_form_list < case Value.
Subgoal 4:

Variables: T1 E1
Value : {value (head E1)}
H1 : {typeOf E1 (list (list T1))}
============================
 head E1 = emptyList \/ (exists Arg1 Arg2, head E1 = cons Arg1 Arg2)

Subgoal 5 is:
 tail E1 = emptyList \/ (exists Arg1 Arg2, tail E1 = cons Arg1 Arg2)

Subgoal 6 is:
 myError = emptyList \/ (exists Arg1 Arg2, myError = cons Arg1 Arg2)

canonical_form_list < case Value.
Subgoal 5:

Variables: T1 E1
Value : {value (tail E1)}
H1 : {typeOf E1 (list T1)}
============================
 tail E1 = emptyList \/ (exists Arg1 Arg2, tail E1 = cons Arg1 Arg2)

Subgoal 6 is:
 myError = emptyList \/ (exists Arg1 Arg2, myError = cons Arg1 Arg2)

canonical_form_list < case Value.
Subgoal 6:

Variables: T1
Value : {value myError}
============================
 myError = emptyList \/ (exists Arg1 Arg2, myError = cons Arg1 Arg2)

canonical_form_list < case Value.
Proof completed.

Abella < Define progresses : term -> prop by 
progresses E := {value E};
progresses E := {error E};
progresses E := exists E', {step E E'}.

Abella < Theorem progress_abs : 
forall R1 T2 T, {typeOf (abs R1 T2) T} -> progresses (abs R1 T2).

============================
 forall R1 T2 T, {typeOf (abs R1 T2) T} -> progresses (abs R1 T2)

progress_abs < search.
Proof completed.

Abella < Theorem progress_app : 
forall E1 E2 T, {typeOf (app E1 E2) T} -> progresses E1 ->
  progresses (app E1 E2).

============================
 forall E1 E2 T, {typeOf (app E1 E2) T} -> progresses E1 ->
   progresses (app E1 E2)

progress_app < intros Main PrgsE1.

Variables: E1 E2 T
Main : {typeOf (app E1 E2) T}
PrgsE1 : progresses E1
============================
 progresses (app E1 E2)

progress_app < case TypeOfE1 : Main.

Variables: E1 E2 T T1
PrgsE1 : progresses E1
TypeOfE1 : {typeOf E1 (arrow T1 T)}
TypeOfE2 : {typeOf E2 T1}
============================
 progresses (app E1 E2)

progress_app < case ProgressClause : PrgsE1.
Subgoal 1:

Variables: E1 E2 T T1
TypeOfE1 : {typeOf E1 (arrow T1 T)}
TypeOfE2 : {typeOf E2 T1}
ProgressClause : {value E1}
============================
 progresses (app E1 E2)

Subgoal 2 is:
 progresses (app E1 E2)

Subgoal 3 is:
 progresses (app E1 E2)

progress_app < apply Canonical : canonical_form_arrow to TypeOfE1 ProgressClause.
Subgoal 1:

Variables: E2 T T1 Arg1 Arg2
TypeOfE1 : {typeOf (abs Arg1 Arg2) (arrow T1 T)}
TypeOfE2 : {typeOf E2 T1}
ProgressClause : {value (abs Arg1 Arg2)}
============================
 progresses (app (abs Arg1 Arg2) E2)

Subgoal 2 is:
 progresses (app E1 E2)

Subgoal 3 is:
 progresses (app E1 E2)

progress_app < search.
Subgoal 2:

Variables: E1 E2 T T1
TypeOfE1 : {typeOf E1 (arrow T1 T)}
TypeOfE2 : {typeOf E2 T1}
ProgressClause : {error E1}
============================
 progresses (app E1 E2)

Subgoal 3 is:
 progresses (app E1 E2)

progress_app < search.
Subgoal 3:

Variables: E1 E2 T T1 E'
TypeOfE1 : {typeOf E1 (arrow T1 T)}
TypeOfE2 : {typeOf E2 T1}
ProgressClause : {step E1 E'}
============================
 progresses (app E1 E2)

progress_app < search.
Proof completed.

Abella < Theorem progress_emptyList : 
forall T, {typeOf emptyList T} -> progresses emptyList.

============================
 forall T, {typeOf emptyList T} -> progresses emptyList

progress_emptyList < search.
Proof completed.

Abella < Theorem progress_cons : 
forall E1 E2 T, {typeOf (cons E1 E2) T} -> progresses (cons E1 E2).

============================
 forall E1 E2 T, {typeOf (cons E1 E2) T} -> progresses (cons E1 E2)

progress_cons < search.
Proof completed.

Abella < Theorem progress_head : 
forall E1 T, {typeOf (head E1) T} -> progresses E1 -> progresses (head E1).

============================
 forall E1 T, {typeOf (head E1) T} -> progresses E1 -> progresses (head E1)

progress_head < intros Main PrgsE1.

Variables: E1 T
Main : {typeOf (head E1) T}
PrgsE1 : progresses E1
============================
 progresses (head E1)

progress_head < case TypeOfE1 : Main.

Variables: E1 T
PrgsE1 : progresses E1
TypeOfE1 : {typeOf E1 (list T)}
============================
 progresses (head E1)

progress_head < case ProgressClause : PrgsE1.
Subgoal 1:

Variables: E1 T
TypeOfE1 : {typeOf E1 (list T)}
ProgressClause : {value E1}
============================
 progresses (head E1)

Subgoal 2 is:
 progresses (head E1)

Subgoal 3 is:
 progresses (head E1)

progress_head < apply Canonical : canonical_form_list to TypeOfE1 ProgressClause.
Subgoal 1:

Variables: E1 T
TypeOfE1 : {typeOf E1 (list T)}
ProgressClause : {value E1}
Canonical : E1 = emptyList \/ (exists Arg1 Arg2, E1 = cons Arg1 Arg2)
============================
 progresses (head E1)

Subgoal 2 is:
 progresses (head E1)

Subgoal 3 is:
 progresses (head E1)

progress_head < case Canonical.
Subgoal 1.1:

Variables: T
TypeOfE1 : {typeOf emptyList (list T)}
ProgressClause : {value emptyList}
============================
 progresses (head emptyList)

Subgoal 1.2 is:
 progresses (head (cons Arg1 Arg2))

Subgoal 2 is:
 progresses (head E1)

Subgoal 3 is:
 progresses (head E1)

progress_head < search.
Subgoal 1.2:

Variables: T Arg1 Arg2
TypeOfE1 : {typeOf (cons Arg1 Arg2) (list T)}
ProgressClause : {value (cons Arg1 Arg2)}
============================
 progresses (head (cons Arg1 Arg2))

Subgoal 2 is:
 progresses (head E1)

Subgoal 3 is:
 progresses (head E1)

progress_head < search.
Subgoal 2:

Variables: E1 T
TypeOfE1 : {typeOf E1 (list T)}
ProgressClause : {error E1}
============================
 progresses (head E1)

Subgoal 3 is:
 progresses (head E1)

progress_head < search.
Subgoal 3:

Variables: E1 T E'
TypeOfE1 : {typeOf E1 (list T)}
ProgressClause : {step E1 E'}
============================
 progresses (head E1)

progress_head < search.
Proof completed.

Abella < Theorem progress_tail : 
forall E1 T, {typeOf (tail E1) T} -> progresses E1 -> progresses (tail E1).

============================
 forall E1 T, {typeOf (tail E1) T} -> progresses E1 -> progresses (tail E1)

progress_tail < intros Main PrgsE1.

Variables: E1 T
Main : {typeOf (tail E1) T}
PrgsE1 : progresses E1
============================
 progresses (tail E1)

progress_tail < case TypeOfE1 : Main.

Variables: E1 T1
PrgsE1 : progresses E1
TypeOfE1 : {typeOf E1 (list T1)}
============================
 progresses (tail E1)

progress_tail < case ProgressClause : PrgsE1.
Subgoal 1:

Variables: E1 T1
TypeOfE1 : {typeOf E1 (list T1)}
ProgressClause : {value E1}
============================
 progresses (tail E1)

Subgoal 2 is:
 progresses (tail E1)

Subgoal 3 is:
 progresses (tail E1)

progress_tail < apply Canonical : canonical_form_list to TypeOfE1 ProgressClause.
Subgoal 1:

Variables: E1 T1
TypeOfE1 : {typeOf E1 (list T1)}
ProgressClause : {value E1}
Canonical : E1 = emptyList \/ (exists Arg1 Arg2, E1 = cons Arg1 Arg2)
============================
 progresses (tail E1)

Subgoal 2 is:
 progresses (tail E1)

Subgoal 3 is:
 progresses (tail E1)

progress_tail < case Canonical.
Subgoal 1.1:

Variables: T1
TypeOfE1 : {typeOf emptyList (list T1)}
ProgressClause : {value emptyList}
============================
 progresses (tail emptyList)

Subgoal 1.2 is:
 progresses (tail (cons Arg1 Arg2))

Subgoal 2 is:
 progresses (tail E1)

Subgoal 3 is:
 progresses (tail E1)

progress_tail < search.
Subgoal 1.2:

Variables: T1 Arg1 Arg2
TypeOfE1 : {typeOf (cons Arg1 Arg2) (list T1)}
ProgressClause : {value (cons Arg1 Arg2)}
============================
 progresses (tail (cons Arg1 Arg2))

Subgoal 2 is:
 progresses (tail E1)

Subgoal 3 is:
 progresses (tail E1)

progress_tail < search.
Subgoal 2:

Variables: E1 T1
TypeOfE1 : {typeOf E1 (list T1)}
ProgressClause : {error E1}
============================
 progresses (tail E1)

Subgoal 3 is:
 progresses (tail E1)

progress_tail < search.
Subgoal 3:

Variables: E1 T1 E'
TypeOfE1 : {typeOf E1 (list T1)}
ProgressClause : {step E1 E'}
============================
 progresses (tail E1)

progress_tail < search.
Proof completed.

Abella < Theorem progress_myError : 
forall T, {typeOf myError T} -> progresses myError.

============================
 forall T, {typeOf myError T} -> progresses myError

progress_myError < search.
Proof completed.

Abella < Theorem progress : 
forall E T, {typeOf E T} -> progresses E.

============================
 forall E T, {typeOf E T} -> progresses E

progress < induction on 1.

IH : forall E T, {typeOf E T}* -> progresses E
============================
 forall E T, {typeOf E T}@ -> progresses E

progress < intros Main.

Variables: E T
IH : forall E T, {typeOf E T}* -> progresses E
Main : {typeOf E T}@
============================
 progresses E

progress < case TypeOfE1 : Main.
Subgoal 1:

Variables: T2 R T1
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf n1 T1 |- typeOf (R n1) T2}*
============================
 progresses (abs R T1)

Subgoal 2 is:
 progresses emptyList

Subgoal 3 is:
 progresses (cons E1 E2)

Subgoal 4 is:
 progresses (app E1 E2)

Subgoal 5 is:
 progresses (head E1)

Subgoal 6 is:
 progresses (tail E1)

Subgoal 7 is:
 progresses myError

progress < backchain progress_abs.
Subgoal 2:

Variables: T1
IH : forall E T, {typeOf E T}* -> progresses E
============================
 progresses emptyList

Subgoal 3 is:
 progresses (cons E1 E2)

Subgoal 4 is:
 progresses (app E1 E2)

Subgoal 5 is:
 progresses (head E1)

Subgoal 6 is:
 progresses (tail E1)

Subgoal 7 is:
 progresses myError

progress < backchain progress_emptyList.
Subgoal 3:

Variables: T1 E2 E1
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf E1 T1}*
TypeOfE2 : {typeOf E2 (list T1)}*
============================
 progresses (cons E1 E2)

Subgoal 4 is:
 progresses (app E1 E2)

Subgoal 5 is:
 progresses (head E1)

Subgoal 6 is:
 progresses (tail E1)

Subgoal 7 is:
 progresses myError

progress < backchain progress_cons.
Subgoal 4:

Variables: T T1 E2 E1
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf E1 (arrow T1 T)}*
TypeOfE2 : {typeOf E2 T1}*
============================
 progresses (app E1 E2)

Subgoal 5 is:
 progresses (head E1)

Subgoal 6 is:
 progresses (tail E1)

Subgoal 7 is:
 progresses myError

progress < apply IH to TypeOfE1.
Subgoal 4:

Variables: T T1 E2 E1
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf E1 (arrow T1 T)}*
TypeOfE2 : {typeOf E2 T1}*
H1 : progresses E1
============================
 progresses (app E1 E2)

Subgoal 5 is:
 progresses (head E1)

Subgoal 6 is:
 progresses (tail E1)

Subgoal 7 is:
 progresses myError

progress < backchain progress_app.
Subgoal 5:

Variables: T E1
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf E1 (list T)}*
============================
 progresses (head E1)

Subgoal 6 is:
 progresses (tail E1)

Subgoal 7 is:
 progresses myError

progress < apply IH to TypeOfE1.
Subgoal 5:

Variables: T E1
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf E1 (list T)}*
H1 : progresses E1
============================
 progresses (head E1)

Subgoal 6 is:
 progresses (tail E1)

Subgoal 7 is:
 progresses myError

progress < backchain progress_head.
Subgoal 6:

Variables: T1 E1
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf E1 (list T1)}*
============================
 progresses (tail E1)

Subgoal 7 is:
 progresses myError

progress < apply IH to TypeOfE1.
Subgoal 6:

Variables: T1 E1
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf E1 (list T1)}*
H1 : progresses E1
============================
 progresses (tail E1)

Subgoal 7 is:
 progresses myError

progress < backchain progress_tail.
Subgoal 7:

Variables: T
IH : forall E T, {typeOf E T}* -> progresses E
============================
 progresses myError

progress < backchain progress_myError.
Proof completed.

Abella < Theorem preservation : 
forall E E' T, {typeOf E T} -> {step E E'} -> {typeOf E' T}.

============================
 forall E E' T, {typeOf E T} -> {step E E'} -> {typeOf E' T}

preservation < induction on 2.

IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
============================
 forall E E' T, {typeOf E T} -> {step E E'}@ -> {typeOf E' T}

preservation < intros TypeOf Main.

Variables: E E' T
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf E T}
Main : {step E E'}@
============================
 {typeOf E' T}

preservation < case Step : Main.
Subgoal 1:

Variables: T EE R T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (app (abs R T1) EE) T}
============================
 {typeOf (R EE) T}

Subgoal 2 is:
 {typeOf myError T}

Subgoal 3 is:
 {typeOf E' T}

Subgoal 4 is:
 {typeOf myError T}

Subgoal 5 is:
 {typeOf E' T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < case Arg1_1 : TypeOf (keep).
Subgoal 1:

Variables: T EE R T1 T2
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (app (abs R T1) EE) T}
Arg1_1 : {typeOf (abs R T1) (arrow T2 T)}
Arg1_2 : {typeOf EE T2}
============================
 {typeOf (R EE) T}

Subgoal 2 is:
 {typeOf myError T}

Subgoal 3 is:
 {typeOf E' T}

Subgoal 4 is:
 {typeOf myError T}

Subgoal 5 is:
 {typeOf E' T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < case Arg2_1 : Arg1_1 (keep).
Subgoal 1:

Variables: T EE R T2
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (app (abs R T2) EE) T}
Arg1_1 : {typeOf (abs R T2) (arrow T2 T)}
Arg1_2 : {typeOf EE T2}
Arg2_1 : {typeOf n1 T2 |- typeOf (R n1) T}
============================
 {typeOf (R EE) T}

Subgoal 2 is:
 {typeOf myError T}

Subgoal 3 is:
 {typeOf E' T}

Subgoal 4 is:
 {typeOf myError T}

Subgoal 5 is:
 {typeOf E' T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < inst ToCut : Arg2_1 with n1 = EE.
Subgoal 1:

Variables: T EE R T2
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (app (abs R T2) EE) T}
Arg1_1 : {typeOf (abs R T2) (arrow T2 T)}
Arg1_2 : {typeOf EE T2}
Arg2_1 : {typeOf n1 T2 |- typeOf (R n1) T}
ToCut : {typeOf EE T2 |- typeOf (R EE) T}
============================
 {typeOf (R EE) T}

Subgoal 2 is:
 {typeOf myError T}

Subgoal 3 is:
 {typeOf E' T}

Subgoal 4 is:
 {typeOf myError T}

Subgoal 5 is:
 {typeOf E' T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < cut ToCut with Arg1_2.
Subgoal 1:

Variables: T EE R T2
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (app (abs R T2) EE) T}
Arg1_1 : {typeOf (abs R T2) (arrow T2 T)}
Arg1_2 : {typeOf EE T2}
Arg2_1 : {typeOf n1 T2 |- typeOf (R n1) T}
ToCut : {typeOf EE T2 |- typeOf (R EE) T}
H1 : {typeOf (R EE) T}
============================
 {typeOf (R EE) T}

Subgoal 2 is:
 {typeOf myError T}

Subgoal 3 is:
 {typeOf E' T}

Subgoal 4 is:
 {typeOf myError T}

Subgoal 5 is:
 {typeOf E' T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < search.
Subgoal 2:

Variables: T
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (head emptyList) T}
============================
 {typeOf myError T}

Subgoal 3 is:
 {typeOf E' T}

Subgoal 4 is:
 {typeOf myError T}

Subgoal 5 is:
 {typeOf E' T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < case Arg1_1 : TypeOf (keep).
Subgoal 2:

Variables: T
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (head emptyList) T}
Arg1_1 : {typeOf emptyList (list T)}
============================
 {typeOf myError T}

Subgoal 3 is:
 {typeOf E' T}

Subgoal 4 is:
 {typeOf myError T}

Subgoal 5 is:
 {typeOf E' T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < case Arg2_1 : Arg1_1 (keep).
Subgoal 2:

Variables: T
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (head emptyList) T}
Arg1_1 : {typeOf emptyList (list T)}
============================
 {typeOf myError T}

Subgoal 3 is:
 {typeOf E' T}

Subgoal 4 is:
 {typeOf myError T}

Subgoal 5 is:
 {typeOf E' T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < search.
Subgoal 3:

Variables: E' T E2
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (head (cons E' E2)) T}
============================
 {typeOf E' T}

Subgoal 4 is:
 {typeOf myError T}

Subgoal 5 is:
 {typeOf E' T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < case Arg1_1 : TypeOf (keep).
Subgoal 3:

Variables: E' T E2
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (head (cons E' E2)) T}
Arg1_1 : {typeOf (cons E' E2) (list T)}
============================
 {typeOf E' T}

Subgoal 4 is:
 {typeOf myError T}

Subgoal 5 is:
 {typeOf E' T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < case Arg2_1 : Arg1_1 (keep).
Subgoal 3:

Variables: E' T E2
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (head (cons E' E2)) T}
Arg1_1 : {typeOf (cons E' E2) (list T)}
Arg2_1 : {typeOf E' T}
Arg2_2 : {typeOf E2 (list T)}
============================
 {typeOf E' T}

Subgoal 4 is:
 {typeOf myError T}

Subgoal 5 is:
 {typeOf E' T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < search.
Subgoal 4:

Variables: T
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (tail emptyList) T}
============================
 {typeOf myError T}

Subgoal 5 is:
 {typeOf E' T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < case Arg1_1 : TypeOf (keep).
Subgoal 4:

Variables: T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (tail emptyList) (list T1)}
Arg1_1 : {typeOf emptyList (list T1)}
============================
 {typeOf myError (list T1)}

Subgoal 5 is:
 {typeOf E' T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < case Arg2_1 : Arg1_1 (keep).
Subgoal 4:

Variables: T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (tail emptyList) (list T1)}
Arg1_1 : {typeOf emptyList (list T1)}
============================
 {typeOf myError (list T1)}

Subgoal 5 is:
 {typeOf E' T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < search.
Subgoal 5:

Variables: E' T E1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (tail (cons E1 E')) T}
============================
 {typeOf E' T}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < case Arg1_1 : TypeOf (keep).
Subgoal 5:

Variables: E' E1 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (tail (cons E1 E')) (list T1)}
Arg1_1 : {typeOf (cons E1 E') (list T1)}
============================
 {typeOf E' (list T1)}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < case Arg2_1 : Arg1_1 (keep).
Subgoal 5:

Variables: E' E1 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (tail (cons E1 E')) (list T1)}
Arg1_1 : {typeOf (cons E1 E') (list T1)}
Arg2_1 : {typeOf E1 T1}
Arg2_2 : {typeOf E' (list T1)}
============================
 {typeOf E' (list T1)}

Subgoal 6 is:
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < search.
Subgoal 6:

Variables: T E1' E1 E2
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (app E1 E2) T}
Step : {step E1 E1'}*
============================
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < case TypeOf1 : TypeOf.
Subgoal 6:

Variables: T E1' E1 E2 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 (arrow T1 T)}
TypeOf2 : {typeOf E2 T1}
============================
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < apply IH to TypeOf1 Step.
Subgoal 6:

Variables: T E1' E1 E2 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 (arrow T1 T)}
TypeOf2 : {typeOf E2 T1}
H1 : {typeOf E1' (arrow T1 T)}
============================
 {typeOf (app E1' E2) T}

Subgoal 7 is:
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < search.
Subgoal 7:

Variables: T E1' E1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (head E1) T}
Step : {step E1 E1'}*
============================
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < case TypeOf1 : TypeOf.
Subgoal 7:

Variables: T E1' E1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 (list T)}
============================
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < apply IH to TypeOf1 Step.
Subgoal 7:

Variables: T E1' E1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 (list T)}
H1 : {typeOf E1' (list T)}
============================
 {typeOf (head E1') T}

Subgoal 8 is:
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < search.
Subgoal 8:

Variables: T E1' E1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (tail E1) T}
Step : {step E1 E1'}*
============================
 {typeOf (tail E1') T}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < case TypeOf1 : TypeOf.
Subgoal 8:

Variables: E1' E1 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 (list T1)}
============================
 {typeOf (tail E1') (list T1)}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < apply IH to TypeOf1 Step.
Subgoal 8:

Variables: E1' E1 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 (list T1)}
H1 : {typeOf E1' (list T1)}
============================
 {typeOf (tail E1') (list T1)}

Subgoal 9 is:
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < search.
Subgoal 9:

Variables: E' T E2
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (app E' E2) T}
Step : {error E'}*
============================
 {typeOf E' T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < case Step.
Subgoal 9:

Variables: T E2
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (app myError E2) T}
============================
 {typeOf myError T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < case TypeOf1 : TypeOf.
Subgoal 9:

Variables: T E2 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf1 : {typeOf myError (arrow T1 T)}
TypeOf2 : {typeOf E2 T1}
============================
 {typeOf myError T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < case TypeOf1.
Subgoal 9:

Variables: T E2 T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf2 : {typeOf E2 T1}
============================
 {typeOf myError T}

Subgoal 10 is:
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < search.
Subgoal 10:

Variables: E' T
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (head E') T}
Step : {error E'}*
============================
 {typeOf E' T}

Subgoal 11 is:
 {typeOf E' T}

preservation < case Step.
Subgoal 10:

Variables: T
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (head myError) T}
============================
 {typeOf myError T}

Subgoal 11 is:
 {typeOf E' T}

preservation < case TypeOf1 : TypeOf.
Subgoal 10:

Variables: T
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf1 : {typeOf myError (list T)}
============================
 {typeOf myError T}

Subgoal 11 is:
 {typeOf E' T}

preservation < case TypeOf1.
Subgoal 10:

Variables: T
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
============================
 {typeOf myError T}

Subgoal 11 is:
 {typeOf E' T}

preservation < search.
Subgoal 11:

Variables: E' T
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (tail E') T}
Step : {error E'}*
============================
 {typeOf E' T}

preservation < case Step.
Subgoal 11:

Variables: T
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf : {typeOf (tail myError) T}
============================
 {typeOf myError T}

preservation < case TypeOf1 : TypeOf.
Subgoal 11:

Variables: T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
TypeOf1 : {typeOf myError (list T1)}
============================
 {typeOf myError (list T1)}

preservation < case TypeOf1.
Subgoal 11:

Variables: T1
IH : forall E E' T, {typeOf E T} -> {step E E'}* -> {typeOf E' T}
============================
 {typeOf myError (list T1)}

preservation < search.
Proof completed.

Abella < Theorem type_soundness : 
forall E E' T, {typeOf E T} -> {nstep E E'} -> progresses E'.

============================
 forall E E' T, {typeOf E T} -> {nstep E E'} -> progresses E'

type_soundness < induction on 2.

IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
============================
 forall E E' T, {typeOf E T} -> {nstep E E'}@ -> progresses E'

type_soundness < intros Main NStep.

Variables: E E' T
IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
Main : {typeOf E T}
NStep : {nstep E E'}@
============================
 progresses E'

type_soundness < case Step1 : NStep.
Subgoal 1:

Variables: E' T
IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
Main : {typeOf E' T}
============================
 progresses E'

Subgoal 2 is:
 progresses E'

type_soundness < backchain progress.
Subgoal 2:

Variables: E E' T E2
IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
Main : {typeOf E T}
Step1 : {step E E2}*
Step2 : {nstep E2 E'}*
============================
 progresses E'

type_soundness < apply TypeOfE2 : preservation to Main Step1.
Subgoal 2:

Variables: E E' T E2
IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
Main : {typeOf E T}
Step1 : {step E E2}*
Step2 : {nstep E2 E'}*
TypeOfE2 : {typeOf E2 T}
============================
 progresses E'

type_soundness < backchain IH with E = E2.
Proof completed.

Abella < Goodbye.
