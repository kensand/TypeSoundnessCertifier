Welcome to Abella 2.0.3
Abella < Specification "pairs_superlazy".
Reading specification "pairs_superlazy"

Abella < Theorem canonical_form_times : 
forall E T1 T2, {typeOf E (times T1 T2)} -> {value E} ->
  (exists Arg1 Arg2, E = pair Arg1 Arg2).


============================
 forall E T1 T2, {typeOf E (times T1 T2)} -> {value E} ->
   (exists Arg1 Arg2, E = pair Arg1 Arg2)

canonical_form_times < intros Main Value.

Variables: E T1 T2
Main : {typeOf E (times T1 T2)}
Value : {value E}
============================
 exists Arg1 Arg2, E = pair Arg1 Arg2

canonical_form_times < case Main.
Subgoal 1:

Variables: T1 T2 E2 E1
Value : {value (pair E1 E2)}
H1 : {typeOf E1 T1}
H2 : {typeOf E2 T2}
============================
 exists Arg1 Arg2, pair E1 E2 = pair Arg1 Arg2

Subgoal 2 is:
 exists Arg1 Arg2, snd E1 = pair Arg1 Arg2

Subgoal 3 is:
 exists Arg1 Arg2, fst E1 = pair Arg1 Arg2

canonical_form_times < case Value.
Subgoal 1:

Variables: T1 T2 E2 E1
H1 : {typeOf E1 T1}
H2 : {typeOf E2 T2}
============================
 exists Arg1 Arg2, pair E1 E2 = pair Arg1 Arg2

Subgoal 2 is:
 exists Arg1 Arg2, snd E1 = pair Arg1 Arg2

Subgoal 3 is:
 exists Arg1 Arg2, fst E1 = pair Arg1 Arg2

canonical_form_times < search.
Subgoal 2:

Variables: T1 T2 T3 E1
Value : {value (snd E1)}
H1 : {typeOf E1 (times T3 (times T1 T2))}
============================
 exists Arg1 Arg2, snd E1 = pair Arg1 Arg2

Subgoal 3 is:
 exists Arg1 Arg2, fst E1 = pair Arg1 Arg2

canonical_form_times < case Value.
Subgoal 3:

Variables: T1 T2 T3 E1
Value : {value (fst E1)}
H1 : {typeOf E1 (times (times T1 T2) T3)}
============================
 exists Arg1 Arg2, fst E1 = pair Arg1 Arg2

canonical_form_times < case Value.
Proof completed.
Abella < Define progresses : term -> prop by 
progresses E := {value E};
progresses E := exists E', {step E E'}.

Abella < Theorem progress_pair : 
forall E1 E2 T, {typeOf (pair E1 E2) T} -> progresses (pair E1 E2).


============================
 forall E1 E2 T, {typeOf (pair E1 E2) T} -> progresses (pair E1 E2)

progress_pair < search.
Proof completed.
Abella < Theorem progress_snd : 
forall E1 T, {typeOf (snd E1) T} -> progresses E1 -> progresses (snd E1).


============================
 forall E1 T, {typeOf (snd E1) T} -> progresses E1 -> progresses (snd E1)

progress_snd < intros Main PrgsE1.

Variables: E1 T
Main : {typeOf (snd E1) T}
PrgsE1 : progresses E1
============================
 progresses (snd E1)

progress_snd < TypeOfE1 : case Main.

Variables: E1 T T1
PrgsE1 : progresses E1
TypeOfE1 : {typeOf E1 (times T1 T)}
============================
 progresses (snd E1)

progress_snd < ProgressClause : case PrgsE1.
Subgoal 1:

Variables: E1 T T1
TypeOfE1 : {typeOf E1 (times T1 T)}
ProgressClause : {value E1}
============================
 progresses (snd E1)

Subgoal 2 is:
 progresses (snd E1)

progress_snd < Canonical : apply canonical_form_times to TypeOfE1 ProgressClause.
Subgoal 1:

Variables: T T1 Arg1 Arg2
TypeOfE1 : {typeOf (pair Arg1 Arg2) (times T1 T)}
ProgressClause : {value (pair Arg1 Arg2)}
============================
 progresses (snd (pair Arg1 Arg2))

Subgoal 2 is:
 progresses (snd E1)

progress_snd < search.
Subgoal 2:

Variables: E1 T T1 E'
TypeOfE1 : {typeOf E1 (times T1 T)}
ProgressClause : {step E1 E'}
============================
 progresses (snd E1)

progress_snd < search.
Proof completed.
Abella < Theorem progress_fst : 
forall E1 T, {typeOf (fst E1) T} -> progresses E1 -> progresses (fst E1).


============================
 forall E1 T, {typeOf (fst E1) T} -> progresses E1 -> progresses (fst E1)

progress_fst < intros Main PrgsE1.

Variables: E1 T
Main : {typeOf (fst E1) T}
PrgsE1 : progresses E1
============================
 progresses (fst E1)

progress_fst < TypeOfE1 : case Main.

Variables: E1 T T2
PrgsE1 : progresses E1
TypeOfE1 : {typeOf E1 (times T T2)}
============================
 progresses (fst E1)

progress_fst < ProgressClause : case PrgsE1.
Subgoal 1:

Variables: E1 T T2
TypeOfE1 : {typeOf E1 (times T T2)}
ProgressClause : {value E1}
============================
 progresses (fst E1)

Subgoal 2 is:
 progresses (fst E1)

progress_fst < Canonical : apply canonical_form_times to TypeOfE1 ProgressClause.
Subgoal 1:

Variables: T T2 Arg1 Arg2
TypeOfE1 : {typeOf (pair Arg1 Arg2) (times T T2)}
ProgressClause : {value (pair Arg1 Arg2)}
============================
 progresses (fst (pair Arg1 Arg2))

Subgoal 2 is:
 progresses (fst E1)

progress_fst < search.
Subgoal 2:

Variables: E1 T T2 E'
TypeOfE1 : {typeOf E1 (times T T2)}
ProgressClause : {step E1 E'}
============================
 progresses (fst E1)

progress_fst < search.
Proof completed.
Abella < Theorem progress : 
forall E T, {typeOf E T} -> progresses E.


============================
 forall E T, {typeOf E T} -> progresses E

progress < induction on 1.

IH : forall E T, {typeOf E T}* -> progresses E
============================
 forall E T, {typeOf E T}@ -> progresses E

progress < intros Main.

Variables: E T
IH : forall E T, {typeOf E T}* -> progresses E
Main : {typeOf E T}@
============================
 progresses E

progress < TypeOfE1 : case Main.
Subgoal 1:

Variables: T2 E2 T1 E1
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf E1 T1}*
TypeOfE2 : {typeOf E2 T2}*
============================
 progresses (pair E1 E2)

Subgoal 2 is:
 progresses (snd E1)

Subgoal 3 is:
 progresses (fst E1)

progress < backchain progress_pair.
Subgoal 2:

Variables: T T1 E1
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf E1 (times T1 T)}*
============================
 progresses (snd E1)

Subgoal 3 is:
 progresses (fst E1)

progress < apply IH to TypeOfE1.
Subgoal 2:

Variables: T T1 E1
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf E1 (times T1 T)}*
H1 : progresses E1
============================
 progresses (snd E1)

Subgoal 3 is:
 progresses (fst E1)

progress < backchain progress_snd.
Subgoal 3:

Variables: T T2 E1
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf E1 (times T T2)}*
============================
 progresses (fst E1)

progress < apply IH to TypeOfE1.
Subgoal 3:

Variables: T T2 E1
IH : forall E T, {typeOf E T}* -> progresses E
TypeOfE1 : {typeOf E1 (times T T2)}*
H1 : progresses E1
============================
 progresses (fst E1)

progress < backchain progress_fst.
Proof completed.
Abella < Theorem preservation : 
forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'} -> {typeOf Exp' T}.


============================
 forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'} -> {typeOf Exp' T}

preservation < induction on 2.

IH : forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'}* -> {typeOf Exp' T}
============================
 forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'}@ -> {typeOf Exp' T}

preservation < intros TypeOf Main.

Variables: Exp Exp' T
IH : forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'}* -> {typeOf Exp' T}
TypeOf : {typeOf Exp T}
Main : {step Exp Exp'}@
============================
 {typeOf Exp' T}

preservation < Step : case Main.
Subgoal 1:

Variables: Exp' T E1
IH : forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'}* -> {typeOf Exp' T}
TypeOf : {typeOf (snd (pair E1 Exp')) T}
============================
 {typeOf Exp' T}

Subgoal 2 is:
 {typeOf Exp' T}

Subgoal 3 is:
 {typeOf (snd E1') T}

Subgoal 4 is:
 {typeOf (fst E1') T}

preservation < Arg1_1 : case TypeOf (keep).
Subgoal 1:

Variables: Exp' T E1 T1
IH : forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'}* -> {typeOf Exp' T}
TypeOf : {typeOf (snd (pair E1 Exp')) T}
Arg1_1 : {typeOf (pair E1 Exp') (times T1 T)}
============================
 {typeOf Exp' T}

Subgoal 2 is:
 {typeOf Exp' T}

Subgoal 3 is:
 {typeOf (snd E1') T}

Subgoal 4 is:
 {typeOf (fst E1') T}

preservation < Arg2_1 : case Arg1_1 (keep).
Subgoal 1:

Variables: Exp' T E1 T1
IH : forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'}* -> {typeOf Exp' T}
TypeOf : {typeOf (snd (pair E1 Exp')) T}
Arg1_1 : {typeOf (pair E1 Exp') (times T1 T)}
Arg2_1 : {typeOf E1 T1}
Arg2_2 : {typeOf Exp' T}
============================
 {typeOf Exp' T}

Subgoal 2 is:
 {typeOf Exp' T}

Subgoal 3 is:
 {typeOf (snd E1') T}

Subgoal 4 is:
 {typeOf (fst E1') T}

preservation < search.
Subgoal 2:

Variables: Exp' T E2
IH : forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'}* -> {typeOf Exp' T}
TypeOf : {typeOf (fst (pair Exp' E2)) T}
============================
 {typeOf Exp' T}

Subgoal 3 is:
 {typeOf (snd E1') T}

Subgoal 4 is:
 {typeOf (fst E1') T}

preservation < Arg1_1 : case TypeOf (keep).
Subgoal 2:

Variables: Exp' T E2 T2
IH : forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'}* -> {typeOf Exp' T}
TypeOf : {typeOf (fst (pair Exp' E2)) T}
Arg1_1 : {typeOf (pair Exp' E2) (times T T2)}
============================
 {typeOf Exp' T}

Subgoal 3 is:
 {typeOf (snd E1') T}

Subgoal 4 is:
 {typeOf (fst E1') T}

preservation < Arg2_1 : case Arg1_1 (keep).
Subgoal 2:

Variables: Exp' T E2 T2
IH : forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'}* -> {typeOf Exp' T}
TypeOf : {typeOf (fst (pair Exp' E2)) T}
Arg1_1 : {typeOf (pair Exp' E2) (times T T2)}
Arg2_1 : {typeOf Exp' T}
Arg2_2 : {typeOf E2 T2}
============================
 {typeOf Exp' T}

Subgoal 3 is:
 {typeOf (snd E1') T}

Subgoal 4 is:
 {typeOf (fst E1') T}

preservation < search.
Subgoal 3:

Variables: T E1' E1
IH : forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'}* -> {typeOf Exp' T}
TypeOf : {typeOf (snd E1) T}
Step : {step E1 E1'}*
============================
 {typeOf (snd E1') T}

Subgoal 4 is:
 {typeOf (fst E1') T}

preservation < TypeOf1 : case TypeOf.
Subgoal 3:

Variables: T E1' E1 T1
IH : forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'}* -> {typeOf Exp' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 (times T1 T)}
============================
 {typeOf (snd E1') T}

Subgoal 4 is:
 {typeOf (fst E1') T}

preservation < apply IH to TypeOf1 Step.
Subgoal 3:

Variables: T E1' E1 T1
IH : forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'}* -> {typeOf Exp' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 (times T1 T)}
H1 : {typeOf E1' (times T1 T)}
============================
 {typeOf (snd E1') T}

Subgoal 4 is:
 {typeOf (fst E1') T}

preservation < search.
Subgoal 4:

Variables: T E1' E1
IH : forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'}* -> {typeOf Exp' T}
TypeOf : {typeOf (fst E1) T}
Step : {step E1 E1'}*
============================
 {typeOf (fst E1') T}

preservation < TypeOf1 : case TypeOf.
Subgoal 4:

Variables: T E1' E1 T2
IH : forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'}* -> {typeOf Exp' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 (times T T2)}
============================
 {typeOf (fst E1') T}

preservation < apply IH to TypeOf1 Step.
Subgoal 4:

Variables: T E1' E1 T2
IH : forall Exp Exp' T, {typeOf Exp T} -> {step Exp Exp'}* -> {typeOf Exp' T}
Step : {step E1 E1'}*
TypeOf1 : {typeOf E1 (times T T2)}
H1 : {typeOf E1' (times T T2)}
============================
 {typeOf (fst E1') T}

preservation < search.
Proof completed.
Abella < Theorem type_soundness : 
forall E E' T, {typeOf E T} -> {nstep E E'} -> progresses E'.


============================
 forall E E' T, {typeOf E T} -> {nstep E E'} -> progresses E'

type_soundness < induction on 2.

IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
============================
 forall E E' T, {typeOf E T} -> {nstep E E'}@ -> progresses E'

type_soundness < intros Main NStep.

Variables: E E' T
IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
Main : {typeOf E T}
NStep : {nstep E E'}@
============================
 progresses E'

type_soundness < Step1 : case NStep.
Subgoal 1:

Variables: E' T
IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
Main : {typeOf E' T}
============================
 progresses E'

Subgoal 2 is:
 progresses E'

type_soundness < backchain progress.
Subgoal 2:

Variables: E E' T E2
IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
Main : {typeOf E T}
Step1 : {step E E2}*
Step2 : {nstep E2 E'}*
============================
 progresses E'

type_soundness < TypeOfE2 : apply preservation to Main Step1.
Subgoal 2:

Variables: E E' T E2
IH : forall E E' T, {typeOf E T} -> {nstep E E'}* -> progresses E'
Main : {typeOf E T}
Step1 : {step E E2}*
Step2 : {nstep E2 E'}*
TypeOfE2 : {typeOf E2 T}
============================
 progresses E'

type_soundness < backchain IH with E = E2.
Proof completed.
Abella < 
</pre>
