ocamlfind ocamlc -package batteries -linkpkg aux.ml type_system.ml proof.ml values.ml errors.ml canonicalForms.ml contextualRules.ml errorContexts.ml progress.ml preservationTests.ml preservation.ml generateLambdaProlog.ml calculi.ml test.ml

#use "topfind";;
#require "batteries";;
open Batteries;;
#load "unix.cma";;

#load  "aux.cmo";;
#load  "type_system.cmo" ;;
#load  "proof.cmo" ;;
#load  "values.cmo";;
#load  "errors.cmo";;
#load  "contextualRules.cmo";;
#load  "errorContexts.cmo";;
#load  "canonicalForms.cmo";;
#load  "progress.cmo";;
#load  "preservationTests.cmo";;
#load  "preservation.cmo";;
#load  "generateLambdaProlog.cmo";;
#load  "calculi.cmo";;
#load  "test.cmo";;

open Aux;;
open Type_system;;
open Proof;;
open Values;;
open Errors;;
open ContextualRules;;
open ErrorContexts;;
open CanonicalForms;;
open Progress;;
open PreservationTests;;
open Preservation;;
open GenerateLambdaProlog;;
open Calculi;;
open Test;;

	let tsWithValues = (generateValues stlc_lists);;
	let tsWithErrors = (generateErrors tsWithValues) ;;
	let tsWithContexts = (generateContextualRules tsWithErrors) ;;
	let ts = (generateErrorContexts tsWithContexts) ;;
print_string (generateModule ts);;
print_string (generateSignature ts);;
print_string (generateTheoremS (generateCanonicalFormsLemma ts));;
print_string (progressDefinition ts);;
print_string (generateTheoremS (generateProgressLemmas ts));;
print_string (generateTheorem (generateProgressTheorem ts));;
print_string (generateTheorem (generatePreservationTheorem ts));;
print_string (generateTestModule ts);;
print_string (runPreservationTests ts);;

let ts = generateNonValues (generateTermPred (generateValues systemF_CBV));;
let ts = addContextualRules ts;;
print_string (generateModule ts);;
print_string (generateSignature ts);;
print_string (generateTheorem (generateEitherLemma ts));;
print_string (generateTheoremS (generateCanonicalFormsLemma ts));;
print_string progressDefinition;;
print_string (generateTheoremS (generateProgressLemmas ts));;
print_string (generateTheorem (generateProgressTheorem ts));;
print_string (generateTheorem (generatePreservationTheorem ts));;
print_string (generateTestModule ts);;
print_string (runPreservationTests ts);;
